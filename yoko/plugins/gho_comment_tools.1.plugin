a:11:{s:4:"name";s:17:"gho_comment_tools";s:6:"status";s:1:"1";s:6:"author";s:17:"Patrick Kollitsch";s:10:"author_uri";s:32:"http://kURL.de/gho_comment_tools";s:7:"version";s:7:"2009.1b";s:11:"description";s:59:"A plugin for a better commenting experience in Textpattern.";s:4:"help";s:10929:"<h1>gho_comment_tools</h1>

	<p>The plugin for a better commenting experience in Txp.</p>

	<h2>Links</h2>

	<ul>
		<li><a href="http://code.google.com/p/textpattern-plugins/wiki/GhoCommentTools" rel="nofollow">Documentation at Google Code</a> (more current)</li>
		<li><a href="http://textpattern-plugins.googlecode.com/svn/trunk/plugins/gho_comment_tools/current/gho_comment_tools.txt" rel="nofollow">Download current version</a></li>
		<li><a href="http://textpattern-plugins.googlecode.com/svn/trunk/plugins/gho_comment_tools/source/gho_comment_tools.php" rel="nofollow">Download development version</a></li>
		<li><a href="http://code.google.com/p/textpattern-plugins/issues/list" rel="nofollow">Issue- and featuretracker</a></li>
		<li><a href="http://groups.google.com/group/textpattern-plugins" rel="nofollow">Support Group</a></li>
	</ul>

	<p>Please have a look at the notes section at the end of this page to solve common problems.</p>

	<h2>Usage</h2>

	<h3>&amp;lt;txp:gho_commabo_checkbox /&amp;gt;</h3>

	<p><strong>gho_commabo_checkbox</strong> creates a checkbox that, if checked, enters the email address of the commentator into the database and sends him an email about new comments on this entry.</p>

	<p>The Plugin creates (if not yet done) a table called txp_commabo in your database. Please do not delete this table, it contains all data needed for the plugin to work. The DB-user of the Textpattern installation needs to have rights to create this table to get this working. If your user has not sufficient rights, you have to create the database table manual with the following <span class="caps">SQL</span>:</p>

	<p><code></code>CREATE <span class="caps">TABLE</span> IF <span class="caps">NOT</span> <span class="caps">EXISTS</span> `txp_commabo` (
  `article` int(11) unsigned <span class="caps">NOT</span> <span class="caps">NULL</span>,
  `email` varchar(127) character set utf8 collate utf8_unicode_ci <span class="caps">NOT</span> <span class="caps">NULL</span><br />
) <span class="caps">ENGINE</span>=MyISAM <span class="caps">DEFAULT</span> <span class="caps">CHARSET</span>=latin1;@@</p>

	<p>It further creates a form gho_commabo which is the template for the email that will be sent to the users subscribed to the entries. All article-related tags will be parsed in this form.</p>

	<ul>
		<li>wraptag (default &#8220;span&#8221;)</li>
		<li>class (default &#8220;ghocommabo&#8221;)</li>
		<li>labelclass (default &#8220;ghocommabolabel&#8221;)</li>
		<li>prefix (default empty)</li>
		<li>suffix (default empty)</li>
		<li>subphrase (default &#8220;subscribe comments&#8221;)</li>
		<li>unsubphrase (default &#8220;unsubscribe comments&#8221;)</li>
		<li>resendphrase (default &#8220;resend optin email&#8221;)</li>
		<li>subject (default &#8220;new comment for &lt;txp:title/&gt;&#8221;) &#8211; subject for the email to the commentators. You can use <span class="caps">TITLE</span> and <span class="caps">SITENAME</span>, which will be replaced by the according contents from the current article.</li>
	</ul>

	<h3>&amp;lt;txp:gho_commabo_unsubscribe /&amp;gt;</h3>

	<ul>
		<li>prints the <span class="caps">URL</span> needed to delete the abo of the receipient. for use in the mailtemplate (gho_commabo).</li>
	</ul>

	<h3>&amp;lt;txp:gho_comments_invite /&amp;gt;</h3>

	<ul>
		<li><strong>showcount</strong>&lt;br/&gt;show the count of existing comments before the invitation (yes|no)? default: yes.</li>
		<li><strong>wraptag</strong>&lt;br/&gt;like in other tags. default: empty (inline).</li>
		<li><strong>class</strong>&lt;br/&gt;the comment-invite is wrapped in a span. what classname should this span (not the wraptag, which is around the span) have? default: &#8220;comm-invite&#8221;</li>
		<li><strong>zero</strong>&lt;br/&gt;if the article has zero comments, what should the invitation state? default: comment-invitation given in the article. if this value is set, it will override the comment-invitation of the article. (remember to set spaces in front of the string if you want a space between the count and the invitation)</li>
		<li><strong>one</strong>&lt;br/&gt;if the article has one comments, what should the invitation state? default is &#8220; comment&#8221;. (remember to set spaces in front of the string if you want a space between the count and the invitation)</li>
		<li><strong>more</strong>&lt;br/&gt;if the article has more than one comments, what should the invitation state? default is &#8220; comments&#8221;. (remember to set spaces in front of the string if you want a space between the count and the invitation)</li>
		<li><strong>nocomment</strong>&lt;br/&gt;if the article has comments disabled, what should the invitation state? default is the comment-invitation given in the articleform. if this value is set, it will override the comment-invitation of the article. if it should state nothing, it has to be set but empty.</li>
		<li><strong>format</strong>&lt;br/&gt;per default gho_comments_invite prints a link to the entry. if you only want a text to appear set format to &#8220;text&#8221;.</li>
		<li><strong>popup</strong>&lt;br/&gt;if popup is set to 1 the link will open a popup instead of loading the commentpage in the actual tab.</li>
	</ul>

	<h3>&amp;lt;txp:gho_last_commentator /&amp;gt;</h3>

	<p>returns shows a line like &#8220;(last comented by brian)&#8221;)</p>

	<p>If comments are not activated the tag will return nothing (might be a candidate for a better work flow in case there are already comments).</p>

	<ul>
		<li><strong>separator</strong>&lt;br/&gt;what string should separate the commentators, if limit is higher than 1. <em>default: &#8220;, &#8220;</em></li>
		<li><strong>prefix</strong>&lt;br/&gt;which string should be inserted before the commentators list? <em>default: &#8220;(last commented by &#8220;</em></li>
		<li><strong>postfix</strong>&lt;br/&gt;which string should be inserted after the commentators list? <em>default: &#8220;)&#8221;</em></li>
		<li><strong>limit</strong>&lt;br/&gt;how many commentators should maximal be shwon. <em>default: 1</em></li>
		<li><strong>linknames</strong>&lt;br/&gt;set to true if you want the names linked to the comments they gave. defaults to false. please note that the link to the comment is realized via the anchor c000000 where 000000 is the commentnumber. there has to be a id defined within the comment-form which is named like said. the anchor has to lead somewhere.</li>
		<li><strong>wraptag</strong> and <strong>class</strong>&lt;br/&gt;like in other tags. <em>default is empty (no wrapping will be done)</em>.</li>
	</ul>

	<p><span class="caps">TODO</span>: a nice tutorial how to get the link-ids done for the attribute linknames</p>

	<h3>&amp;lt;txp:gho_comment_num /&amp;gt;</h3>

	<p>returns a incrementing counter if you don&#8217;t use the &#8216;Present comments as a numbered list&#8221;-setting of <span class="caps">TXP</span>. This function is useful not only for the commentform but nearly everywhere you need something incrementing.</p>

	<h2>Notes</h2>

	<p>The plugin is set to run later than most of the other plugins. You can change the running order of the plugin on the plugin page of your Textpattern installation, but you should not. This plugin should run <em>after</em> all other comment plugins (antispam plugins and so one) are done or you will get most probably results you are not expecting (mail about new comments arriving even if a comment is moderated because of spam and the like).</p>

	<h3>History</h3>

	<p>2009-09-## Development Release</p>

    * C: Reworked way of creating and updating needed database structures
    * F: Options/Settings for the plugin
    * F: Admin side extension to maintain current status of subscriptions
    * F: Optin functionality for comment subscriptions
    * F: gho_commabo_checkbox: attribute subject is used as subject for mails to commentators. <span class="caps">TITLE</span> and <span class="caps">SITENAME</span> is replaced with current values
    * D: extended documentation
    * I: switch to english phrases/templates
    * C: code review

	<p>2009-08-24 2009.1a</p>

    * B: lots of missing tags in the script.

	<p>2008-06-02 2008.2</p>

    * C: first release of gho_comment_tools including gho_comment_abo and gho_comments_invite
    * D: documentation of the features
    * F: added label-tag, prefix, suffix and labelclass to gho_commabo_checkbox

	<p>2008-04-27 gho_comment_abo 2008.1</p>

    * C: first public release
    * F: tag gho_commabo_unsubscribe
    * F: commentator does not get a mail of his own (following) comments
    * B: mailform had no type, not editable

	<p>2008-04-19 gho_comment_abo v0.2c</p>

    * B: another bug that put the last subscriber into the database

	<p>2008-04-17 gho_comment_abo v0.2b</p>

    * B: rework, nasty bugs and features that were breakers
    * F: added a cashhash to the unsublink (no really need for this but it broke debugging)

	<p>2008-04-12 gho_comment_abo v0.1</p>

    * F: checkbox for subscribing /unsubscribing to articles comments
    * F: inserting subscriber and sending mail on new comments
    * F: creating form with notificationmail

	<p>2007-06-22 gho_comment_invites v.2007.1</p>

    * C: re-release (revised for Textpattern 4.0.4)

	<p>2006-05-26 gho_comment_invites v.2006.2</p>

    * D: better documentation
    * F: gho_commentnum gives back a counter for your comments, if you don&#8217;t use the &#8220;Present comments as a numbered list?&#8221;-setting of <span class="caps">TXP</span>

	<p>2006-01-11 gho_comment_invites v.2006.1</p>

    * C: re-release (revised for Textpattern 4.0.3)
    * D: new documentation
    * F: attribute format for the gho_comments_invite-tag
    * F: attribute popup for the gho_comments_invite-tag

	<p>2005-08-16 gho_comment_invites v.4.0</p>

    * C: revised for TXP4.0
    * D: messed up documentation fixed

	<p>2005-08-14 gho_comment_invites v.1.0</p>

    * C: revised for TXP1.0

	<p>2005-05-03 gho_comment_invites v.0.4</p>

    * F: linknames-attribut for gho_last_commentator (name of the commentator will be linked to his comment)

	<p>2005-05-02 gho_comment_invites v.0.3</p>

    * F: new tag gho_last_commentator for the name(s) of the last commentators

	<p>2005-04-22 gho_comment_invites v.0.2</p>

    * B: for the zero-text
    * B: wraptag is applied to the nocomment-invitation
    * F: if comments disabled and there are yet comments the nocomment-text will be linked to the comments
    * F: changes in the handling of the nocomment-attribute
    * F: class-attribute

	<p>2005-04-21 gho_comment_invites v.0.1</p>

    * C: initial version

	<p>Legend:
	* B: Bugfix
	* C: Code
	* D: Documentation
	* F: Feature
	* I: Internationalization</p>";s:4:"code";s:19032:"// because
define('GHO_COMMENT_TOOLS_REVISION', '$Revision$');

/**
 * registration:
 * - gho_commabo_save() while comments are saved
 * - gho_commabo_admin() as admin-side-extension-tab
 */
register_callback('gho_commabo_save','comment.save');
if (@txpinterface == 'admin'){
    add_privs('gho_commabo_admin');
    register_tab('extensions', 'gho_commabo_admin', 'CommentTools');
    register_callback('gho_commabo_admin', 'gho_commabo_admin');
};

/**
 * some default settings
 */
$gho = array(
    'commabo' => array(
        'optinparam'    => 'ghooptin',
        'deleteparam'   => 'ghodelete',
        'formcontent'   => array(
            'optin'     => '
Hello,

You or someone else subscribed to the comments for the entry "<txp:title />" at "<txp:sitename/>".
If you want to confirm this subscription please click the following link, if not just ignore this email:

<txp:gho_commabo_optinlink />
            ',
            'comment'   => '
Hello,

there is a new comment at "<txp:sitename/>" for the entry "<txp:title />".
You can read it at <txp:permlink />.

If you want to delete this subscription please click this link: <txp:gho_commabo_ubsubscribe/>
',
        ),
        'formname'      => array(
            'optin'     => 'gho_commabooptin',
            'comment'   => 'gho_commabocomment',
        ),
    ),
);

/**
 * callback comment.save, does the other stuff this plugin does while saving the comment
 *
 * @global <type> $sitename
 */
function gho_commabo_save() {

    global $sitename;
    extract(getComment());
    $commentemail = $email;

    /**
     * mail the comment to subscribers
     */
    $abos = array_unique(safe_column("email", 'txp_commabo', "`article` = ".$parentid." and active='1'"));
    if (is_array($abos)){
        $article = safe_row("AuthorID, Title", "textpattern", "ID = ".$parentid);
        extract($article);
        foreach($abos as $aboemail) {
            if ($aboemail <> $commentemail) {
                extract(safe_row("RealName, email", "txp_users", "name = '".doSlash($AuthorID)."'"));
                if ($subject == false) {
                    $subject = 'New comment for '.$Title;
                } else {
                    /**
                     * @todo make it with parse and tags
                     */
                    $subject = str_replace(
                        array("TITLE", "SITENAME"),
                        array($Title, $sitename),
                        $subject
                    );
                };
                $sep = !is_windows() ? "\n" : "\r\n";
                // @todo parsing of comments tags
                // @todo make configurable who is sending this email
                $body = parse(gho_commabo_get_form('comment'), $aboemail);
                mail($aboemail, $subject, $body, "From: $RealName <$email>".$sep.
                    'X-Mailer: gho_commabo/TXP'.$sep.'Content-Transfer-Encoding: 8bit'.
                    $sep.'Content-Type: text/plain; charset="'.$charset.'"'.$sep
                );
            };
        };
    };
    /**
     * after sending of comment so this comment is not delivered to the new subscribee
     * subscription checkbox = checked. subscribe. check.
     */
    extract(getComment());
    $commabo = trim(ps('commabo'));
    if ($commabo == "1" && emailcheck($email) == true) {
    // if optin, then active=0 and email to subscribee
        $optinsettings = fetch('name','txp_prefs','name','gho_commabo_enable_optin');
        if ($optinsettings == '1') {
            safe_insert( safe_pfx('txp_commabo'), "`article` = '".$parentid."', `email` = '".$email."', active='0' ");
            // send activation email!
            $body = parse(gho_commabo_get_form('optin', $parentid, $email));
            $sep = !is_windows() ? "\n" : "\r\n";
            mail($email, "Subscription", $body, "From: $RealName <$email>".$sep.
                'X-Mailer: gho_commabo/TXP'.$sep.'Content-Transfer-Encoding: 8bit'.
                $sep.'Content-Type: text/plain; charset="'.$charset.'"'.$sep
            );
        } else {
        // no optin, insert with active=1
            safe_insert( "txp_commabo", "`article` = '".$parentid."', `email` = '".$email."', active='1' ");
        };
    };
}

/**
 * tag <txp:commabo_checkbox/>
 * creating the subscription markup, activating and deleting  the subscription
 * returns:
 *   if not subscribed: checkbox to subscribe
 *   if subscribed but not yet opted in: links to resend optinmail and delete subscription
 *   if subscribed: link to delete subscription
 *
 * @global array $pretext
 * @param array $atts attributes
 * @return string
 */
function gho_commabo_checkbox($atts=false) {

    global $pretext;
    $wraptag 		= (empty($atts['wraptag'])) 		? 'span'   		: $atts['wraptag'];
    $class   		= (empty($atts['class']))   		? 'ghocommabo'		: $atts['class'];
    $labelclass   	= (empty($atts['labelclass']))   	? 'ghocommabolabel'	: $atts['class'];
    $prefix  		= (empty($atts['prefix']))  		? '' 			: $atts['prefix'];
    $suffix  		= (empty($atts['suffix']))  		? '' 			: $atts['suffix'];
    $subphrase  	= (!empty($atts['subphrase']))  	? $atts['subphrase']    : 'subscribe comments';
    $unsubphrase	= (!empty($atts['unsubphrase']))	? $atts['unsubphrase'] 	: 'unsubscribe comments';
    $resendphrase	= (!empty($atts['resendphrase']))	? $atts['resendphrase'] : 'resend optin email';
    static $subject     = false;
    $subject            = (empty($atts['subject']))		? false			: $atts['subject'];

    /**
     * linkaction: deletes the subscription, commabodelete=user@domain.ext
     */
    $commabodelete = trim(gps('commabodelete'));
    if ($commabodelete <> '') {
        $result = gho_commabo_delete($commabodelete, $pretext['id']);
        /**
         * reload the page - or commenting will be buggy.
         *
         * @todo usable information to the user via cookie
         */
        header('Location: '.permlinkurl_id($pretext['id']));
        exit;
    };

    /**
     * link action: activate subscription via email hash key, commabooptin=hash
     */
    $commabooptin = trim(gps('commabooptin'));
    if ($commabooptin <> ''){
        $abos = array_unique(safe_column("email", safe_pfx('txp_commabo'), "`article` = '".$pretext['id']."'"));
        if (is_array($abos)) {
            foreach($abos as $abo) {
                // check if key is md5 key of id and email
                if ($commabooptin == md5($pretext['id'].$abo)) {
                    // if hit yes, update table set active to 1
                    safe_update(
                        'txp_commabo',
                        "active = '1'",
                        "`article` = '".$pretext['id']."' and `email` = '".$abo."'"
                    );
                    /**
                     * @todo usable information to the user via cookie
                     */
                    header('Location: '.permlinkurl_id($pretext['id']));
                    exit;
                };
            };
        };
    };

    /**
     * check if the visitor is already subscribed and set an unsubscribe-link instead of the checkbox
     * @todo check if it is possible to do without relying on the cookie. I guess not.
     * @todo additional link while subscription is not activated
     */
    if (!empty($_COOKIE['txp_email']) && emailcheck($_COOKIE['txp_email']) == true) {
        $subscription = safe_row("active", safe_pfx('txp_commabo'), "`article` = '".$pretext['id']."' AND `email` = '".$_COOKIE['txp_email']."' limit 1");
        if ($subscription) {
            $out = '';
            /**
             * subscribed but not activated yet
             */
            if  ($subscription['active'] == '0'){
                $out .= $prefix.'<a href="';
                $out .= gho_commabo_create_link('optin', $pretext['id'], $_COOKIE['txp_email']);
                $out .= '">'.$resendphrase.'</a>'.$suffix.' | ';
            };
            $url = permlinkurl_id($pretext['id']);
            $url .= (strstr($url, '?')) ? "&" : "?";
            $url .= "commabodelete=".$_COOKIE['txp_email'];
            // workaround for the cachething txp does sometimes
            $url .= "&cachehash=".time();
            $out .= $prefix.'<a href="'.$url.'">'.$unsubphrase.'</a>'.$suffix;
            $unsub = true;
        };
    };

    /**
     * create the checkbox
     */
    if ($unsub == false) {
        $checked = (trim(ps('commabo')) == "1") ? 'checked="checked"' : "";
        $out = $prefix.'<input type="checkbox" id="commabo" name="commabo" '.$checked.' value="1" />';
        $out .= '<label class="'.$labelclass.'" for="commabo">'.$subphrase.'</label>'.$suffix;
    };

    /**
     *  output of the tag
     */
    return (!empty($wraptag))
        ? doTag($out, $wraptag, $class)
        : $out;
}

/**
 * returns the form used for different functions of gho_commabo
 *
 * @param string $what what form to deliver (optin, comment)
 * @param int $id id of current article
 * @param string $email email of recipient
 * @return string the filled form
 */
function gho_commabo_get_form($what, $id = false, $email = false) {
    $form = $GLOBALS['gho']['commabo']['formcontent'][$what];
    $rs = safe_row(
        'Form',
        'txp_form',
        "name='".$GLOBALS['gho']['commabo']['formname'][$what]."' limit 1"
    );
    if (!$rs) {
        safe_insert(
            'txp_form',
            "name='".$GLOBALS['gho']['commabo']['formname'][$what]."', type='misc', Form='$form'"
        );
    } else {
        $form = $rs['Form'];
    };
    /**
     * @todo make that some tags for delete- and optin-links and use parse()
     */
    $form = ereg_replace(
        "<txp:gho_commabo_optinlink(.*)/>",
        gho_commabo_create_link('optin', $id, $email),
        $form
    );
    return ereg_replace(
        "<txp:gho_commabo_unsubscribe(.*)/>",
        gho_commabo_create_link('comment', $id, $email),
        $form
    );
}

/**
 * deletes subscription of $email to article $id
 */
function gho_commabo_delete($email = '', $id = false) {
    if (intval($id) && $email <> '') {
        return safe_delete(
            'txp_commabo',
            "`article` = '".$id."' AND `email` = '".$email."'"
        );
    } elseif ($id == false && $email <> ''){
        return safe_delete(
            'txp_commabo',
            "`email` = '".$email."'"
        );
    } else return false;
}

/**
 * creates URLs used by gho_commabo
 *
 * @param integer $id ID of the article relevant for the subscription
 * @param string $email email address that will be unsubscribed
 * @return string URL that unsubscribes the user from this article
 */
function gho_commabo_create_link($what, $id = false, $email = false){
    $url = permlinkurl_id(intval($id));
    $url .= (strstr($url, '?')) ? "&" : "?";
    switch ($what){
        case 'unsubscribe':
            $url .= 'commabodelete='.$email;
            break;
        case 'optin':
            $url .= 'commabooptin='.md5($id.$email);
            break;
    }
    return $url;
}

/**
 * <txp:gho_comments_invite />
 */
function gho_comments_invite($atts) {
    global $thisarticle;
    if (is_array($atts)){
        extract($atts);
    };
    $id = $thisarticle['thisid'];
    $commentdata = safe_rows("Annotate, AnnotateInvite", "textpattern", "ID='$id'");
    $showcount = (empty($showcount))    ? "yes"         : $showcount;
    $wraptag =   (empty($wraptag))      ? ''            : $wraptag;
    $class =     (empty($class))        ? "comm-invite" : $class;
    $zero =      (empty($zero))         ? ''            : $zero;
    $one =       (empty($one))          ? " comment"    : $one;
    $more =      (empty($more))         ? " comments"   : $more;
    $popup =     (isset($popup) && $popup == 1) ? true  : false;
    $format =    (isset($format) && $format == 'text') ? 'text' : 'link';
    $nocomment = (!isset($nocomment))
        ? $commentdata[0]["AnnotateInvite"]
        : ((empty($nocomment))
            ? ''
            : $nocomment
    );
    if (!empty($zero)) {
        $commentdata[0]['AnnotateInvite'] = $zero;
    };
    $total_comments = safe_count('txp_discuss', "parentid='$id' and visible='1'");
    $popupmarkup = ($popup)
        ? ' target="_blank"'
        : '';
    if ($commentdata[0]["Annotate"] == 1) {
        $tmp_count = ($showcount == "yes") ? $total_comments : "";
        $before = ($total_comments == 0)
            ? $commentdata[0]["AnnotateInvite"]
            : (($total_comments == 1)
                ? $tmp_count.$one
                : (($total_comments > 1)
                    ? $tmp_count.$more
                    : ''
            )
        );
        $out = '<span class="'.$class.'">';
        if ($format == 'link') $out .= '<a href="'.permlinkurl($thisarticle).'#'.gTxt('comment').'"'.$popupmarkup.'>';
        $out .= $before;
        if ($format == 'link') $out .= '</a>';
        $out .= '</span>';
    } elseif (empty($nocomment)) {
        $out = '';
    } else {
        $out = '<span class="'.$class.'">';
        $out .= ($total_comments > 0 && $format == 'link')
            ? '<a href="'.permlinkurl($thisarticle).'#'.gTxt('comment').'"'.$popupmarkup.'>'
            : '';
        $out .= $nocomment;
        $out .= ($total_comments > 0 && $format == 'link')
            ? '</a>'
            : '';
        $out .= '</span>';
    };
    if (!empty($wraptag)) {
        return tag($out,$wraptag);
    };
    return $out;
}

/**
 * <txp:gho_last_commentator />
 *
 * @final
 */
function gho_last_commentator($atts=false) {
    global $thisarticle;
    $id         = $thisarticle['thisid'];
    $separator  = (empty($atts['separator']))   ? ', '                  : $atts['separator'];
    $limit      = (empty($atts['limit']))       ? 1                     : intval($atts['limit']);
    $postfix    = (empty($atts['postfix']))     ? ')'                   : $atts['postfix'];
    $prefix     = (empty($atts['prefix']))      ? '(last commented by ' : $atts['prefix'];
    $linknames  = (empty($atts['linknames']))   ? false                 : true;
    $wraptag    = (empty($atts['wraptag']))     ? ''                    : $atts['wraptag'];
    $class      = (empty($atts['class']))       ? ''                    : $atts['class'];

    $darr       = safe_rows(
        'discussid, name, posted, parentid, visible',
        'txp_discuss',
        "parentid='$id' AND visible='1' GROUP BY name ORDER BY posted DESC LIMIT $limit"
    );
    $comment_display    = safe_rows('Annotate', 'textpattern', "ID='$id'");
    $allowcomments      = $comment_display[0]['Annotate'];
    if ($allowcomments == 1){
        foreach($darr as $vars){
            $names[] = ($linknames == true)
                ? '<a href="'.permlinkurl($thisarticle).'#c'.$vars['discussid'].'">'.$vars['name'].'</a>'
                : $vars['name'];
        };
        $out = (!empty($names))
            ? $pretext.implode($separator, $names).$posttext
            : false;
        if (!empty($wraptag) && (!empty($out))) {
            return tag($out, $wraptag, (!empty($class)) ? 'class='.$class : '');
        };
        return $out;
    };
}

/**
 * <txp:gho_comment_num />
 *
 * @staticvar int $gho_comment_num
 * @return int incrementing counter each time the tag is called
 * @final
 */
function gho_comment_num() {
    static $gho_comment_num = 1;
    return $gho_comment_num++;
}

/**
 *  helper, functions for verifying emailaddresses, old stuff from my nineties
 */
if (!function_exists('emailcheck')){
    function emailcheck($eaddr=""){
    /**
     * @var string Regexp f?r matching auf valide Emailsyntax
     */
        $pattern = "/^([a-zA-Z0-9])+([\.a-zA-Z0-9_-])*@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/";
        if (empty($eaddr)) {
            return false;
        } elseif (!preg_match($pattern, $eaddr)){
            return false;
        } else {
            $laddr = "";
            $laddr = $eaddr;
            $laddr = preg_replace('/^.*</','', $laddr);
            $laddr = preg_replace('/>.*$/','',$laddr);
            if (preg_match('/^\@.*:/',$laddr)){
                list($domain,$addr_spec) = preg_split('/:/',$laddr);
                $domain = preg_replace('/^\@/','',$domain);
                if (!is_domain($domain)) {return false;}
                $laddr = $addr_spec;
            };
            return(is_addr_spec($laddr));
        };
    }
	/**#@+
	 * @access private
	 * @since 1.0.1 (26.03.2004)
	 * @version 1.0.1
	 */
    function is_addr_spec ($eaddr = ""){
        list($local_part,$domain) = preg_split('/\@/',$eaddr);
        if (!is_local_part($local_part) || !is_domain($domain)){
            return false;
        };
        return true;
    }
    function is_local_part ($local_part = ""){
        if (empty($local_part)){
            return false;
        };
        $bit_array = preg_split('/\./',$local_part);
        while (list(,$bit) = each($bit_array)){
            if (!is_word($bit)){
                return false;
            };
        };
        return true;
    }
    function is_word($word = ""){
        if (preg_match('/^".*"$/i',$word)){
            return(is_quoted_string($word));
        };
        return(is_atom($word));
    }
    function is_quoted_string($word = ""){
        $word = preg_replace('/^"/','',$word);
        $word = preg_replace('/"$/','',$word);
        $word = preg_replace('/\\+/','',$word);
        if (preg_match('/\"\\\r/',$word)){
            return false;
        };
        return true;
    }
    function is_atom($atom = ""){
        if ((preg_match('/[\(\)\<\>\@\,\;\:\\\"\.\[\]]/',$atom)) || (preg_match('/\040/',$atom)) || (preg_match('/[\x00-\x1F]/',$atom))) {
            return false;
        };
        return true;
    }
    function is_domain($domain = ""){
        if (empty($domain)){
            return false;
        };
        if (!preg_match('/\./',$domain)){
            return false;
        };
        $dbit_array = preg_split('/./',$domain);
        while (list(,$dbit) = each($dbit_array)){
            if (!is_sub_domain($dbit)){
                return false;
            };
        };
        return true;
    }
    function is_sub_domain($subd = ""){
        if (preg_match('/^\[.*\]$/',$subd)){
            return(is_domain_literal($subd));
        };
        return(is_atom($subd));
    }
    function is_domain_literal($dom = ""){
        $dom = preg_replace('/\\+/','',$dom);
        if (preg_match('/[\[\]\\\r]/',$dom)){
            return false;
        };
        return true;
    }
	/**#@-*/
}

";s:12:"code_restore";s:18510:"
// because
define('GHO_COMMENT_TOOLS_REVISION', '$Revision$');

/**
 * registration:
 * - gho_commabo_save() while comments are saved
 * - gho_commabo_admin() as admin-side-extension-tab
 */
register_callback('gho_commabo_save','comment.save');
if (@txpinterface == 'admin'){
    add_privs('gho_commabo_admin');
    register_tab('extensions', 'gho_commabo_admin', 'CommentTools');
    register_callback('gho_commabo_admin', 'gho_commabo_admin');
};

/**
 * some default settings
 */
$gho = array(
    'commabo' => array(
        'optinparam'    => 'ghooptin',
        'deleteparam'   => 'ghodelete',
        'formcontent'   => array(
            'optin'     => '
Hello,

You or someone else subscribed to the comments for the entry "<txp:title />" at "<txp:sitename/>".
If you want to confirm this subscription please click the following link, if not just ignore this email:

<txp:gho_commabo_optinlink />
            ',
            'comment'   => '
Hello,

there is a new comment at "<txp:sitename/>" for the entry "<txp:title />".
You can read it at <txp:permlink />.

If you want to delete this subscription please click this link: <txp:gho_commabo_ubsubscribe/>
',
        ),
        'formname'      => array(
            'optin'     => 'gho_commabooptin',
            'comment'   => 'gho_commabocomment',
        ),
    ),
);

/**
 * callback comment.save, does the other stuff this plugin does while saving the comment
 *
 * @global <type> $sitename
 */
function gho_commabo_save() {

    global $sitename;
    extract(getComment());
    $commentemail = $email;

    /**
     * mail the comment to subscribers
     */
    $abos = array_unique(safe_column("email", 'txp_commabo', "`article` = ".$parentid." and active='1'"));
    if (is_array($abos)){
        $article = safe_row("AuthorID, Title", "textpattern", "ID = ".$parentid);
        extract($article);
        foreach($abos as $aboemail) {
            if ($aboemail <> $commentemail) {
                extract(safe_row("RealName, email", "txp_users", "name = '".doSlash($AuthorID)."'"));
                if ($subject == false) {
                    $subject = 'New comment for '.$Title;
                } else {
                    /**
                     * @todo make it with parse and tags
                     */
                    $subject = str_replace(
                        array("TITLE", "SITENAME"),
                        array($Title, $sitename),
                        $subject
                    );
                };
                $sep = !is_windows() ? "\n" : "\r\n";
                // @todo parsing of comments tags
                // @todo make configurable who is sending this email
                $body = parse(gho_commabo_get_form('comment'), $aboemail);
                mail($aboemail, $subject, $body, "From: $RealName <$email>".$sep.
                    'X-Mailer: gho_commabo/TXP'.$sep.'Content-Transfer-Encoding: 8bit'.
                    $sep.'Content-Type: text/plain; charset="'.$charset.'"'.$sep
                );
            };
        };
    };
    /**
     * after sending of comment so this comment is not delivered to the new subscribee
     * subscription checkbox = checked. subscribe. check.
     */
    extract(getComment());
    $commabo = trim(ps('commabo'));
    if ($commabo == "1" && emailcheck($email) == true) {
    // if optin, then active=0 and email to subscribee
        $optinsettings = fetch('name','txp_prefs','name','gho_commabo_enable_optin');
        if ($optinsettings == '1') {
            safe_insert( safe_pfx('txp_commabo'), "`article` = '".$parentid."', `email` = '".$email."', active='0' ");
            // send activation email!
            $body = parse(gho_commabo_get_form('optin', $parentid, $email));
            $sep = !is_windows() ? "\n" : "\r\n";
            mail($email, "Subscription", $body, "From: $RealName <$email>".$sep.
                'X-Mailer: gho_commabo/TXP'.$sep.'Content-Transfer-Encoding: 8bit'.
                $sep.'Content-Type: text/plain; charset="'.$charset.'"'.$sep
            );
        } else {
        // no optin, insert with active=1
            safe_insert( "txp_commabo", "`article` = '".$parentid."', `email` = '".$email."', active='1' ");
        };
    };
}

/**
 * tag <txp:commabo_checkbox/>
 * creating the subscription markup, activating and deleting  the subscription
 * returns:
 *   if not subscribed: checkbox to subscribe
 *   if subscribed but not yet opted in: links to resend optinmail and delete subscription
 *   if subscribed: link to delete subscription
 *
 * @global array $pretext
 * @param array $atts attributes
 * @return string
 */
function gho_commabo_checkbox($atts=false) {

    global $pretext;
    $wraptag 		= (empty($atts['wraptag'])) 		? 'span'   		: $atts['wraptag'];
    $class   		= (empty($atts['class']))   		? 'ghocommabo'		: $atts['class'];
    $labelclass   	= (empty($atts['labelclass']))   	? 'ghocommabolabel'	: $atts['class'];
    $prefix  		= (empty($atts['prefix']))  		? '' 			: $atts['prefix'];
    $suffix  		= (empty($atts['suffix']))  		? '' 			: $atts['suffix'];
    $subphrase  	= (!empty($atts['subphrase']))  	? $atts['subphrase']    : 'subscribe comments';
    $unsubphrase	= (!empty($atts['unsubphrase']))	? $atts['unsubphrase'] 	: 'unsubscribe comments';
    $resendphrase	= (!empty($atts['resendphrase']))	? $atts['resendphrase'] : 'resend optin email';
    static $subject     = false;
    $subject            = (empty($atts['subject']))		? false			: $atts['subject'];

    /**
     * linkaction: deletes the subscription, commabodelete=user@domain.ext
     */
    $commabodelete = trim(gps('commabodelete'));
    if ($commabodelete <> '') {
        $result = gho_commabo_delete($commabodelete, $pretext['id']);
        /**
         * reload the page - or commenting will be buggy.
         *
         * @todo usable information to the user via cookie
         */
        header('Location: '.permlinkurl_id($pretext['id']));
        exit;
    };

    /**
     * link action: activate subscription via email hash key, commabooptin=hash
     */
    $commabooptin = trim(gps('commabooptin'));
    if ($commabooptin <> ''){
        $abos = array_unique(safe_column("email", safe_pfx('txp_commabo'), "`article` = '".$pretext['id']."'"));
        if (is_array($abos)) {
            foreach($abos as $abo) {
                // check if key is md5 key of id and email
                if ($commabooptin == md5($pretext['id'].$abo)) {
                    // if hit yes, update table set active to 1
                    safe_update(
                        'txp_commabo',
                        "active = '1'",
                        "`article` = '".$pretext['id']."' and `email` = '".$abo."'"
                    );
                    /**
                     * @todo usable information to the user via cookie
                     */
                    header('Location: '.permlinkurl_id($pretext['id']));
                    exit;
                };
            };
        };
    };

    /**
     * check if the visitor is already subscribed and set an unsubscribe-link instead of the checkbox
     * @todo check if it is possible to do without relying on the cookie. I guess not.
     * @todo additional link while subscription is not activated
     */
    if (!empty($_COOKIE['txp_email']) && emailcheck($_COOKIE['txp_email']) == true) {
        $subscription = safe_row("active", safe_pfx('txp_commabo'), "`article` = '".$pretext['id']."' AND `email` = '".$_COOKIE['txp_email']."' limit 1");
        if ($subscription) {
            $out = '';
            /**
             * subscribed but not activated yet
             */
            if  ($subscription['active'] == '0'){
                $out .= $prefix.'<a href="';
                $out .= gho_commabo_create_link('optin', $pretext['id'], $_COOKIE['txp_email']);
                $out .= '">'.$resendphrase.'</a>'.$suffix.' | ';
            };
            $url = permlinkurl_id($pretext['id']);
            $url .= (strstr($url, '?')) ? "&" : "?";
            $url .= "commabodelete=".$_COOKIE['txp_email'];
            // workaround for the cachething txp does sometimes
            $url .= "&cachehash=".time();
            $out .= $prefix.'<a href="'.$url.'">'.$unsubphrase.'</a>'.$suffix;
            $unsub = true;
        };
    };

    /**
     * create the checkbox
     */
    if ($unsub == false) {
        $checked = (trim(ps('commabo')) == "1") ? 'checked="checked"' : "";
        $out = $prefix.'<input type="checkbox" id="commabo" name="commabo" '.$checked.' value="1" />';
        $out .= '<label class="'.$labelclass.'" for="commabo">'.$subphrase.'</label>'.$suffix;
    };

    /**
     *  output of the tag
     */
    return (!empty($wraptag))
        ? doTag($out, $wraptag, $class)
        : $out;
}

/**
 * returns the form used for different functions of gho_commabo
 *
 * @param string $what what form to deliver (optin, comment)
 * @param int $id id of current article
 * @param string $email email of recipient
 * @return string the filled form
 */
function gho_commabo_get_form($what, $id = false, $email = false) {
    $form = $GLOBALS['gho']['commabo']['formcontent'][$what];
    $rs = safe_row(
        'Form',
        'txp_form',
        "name='".$GLOBALS['gho']['commabo']['formname'][$what]."' limit 1"
    );
    if (!$rs) {
        safe_insert(
            'txp_form',
            "name='".$GLOBALS['gho']['commabo']['formname'][$what]."', type='misc', Form='$form'"
        );
    } else {
        $form = $rs['Form'];
    };
    /**
     * @todo make that some tags for delete- and optin-links and use parse()
     */
    $form = ereg_replace(
        "<txp:gho_commabo_optinlink(.*)/>",
        gho_commabo_create_link('optin', $id, $email),
        $form
    );
    return ereg_replace(
        "<txp:gho_commabo_unsubscribe(.*)/>",
        gho_commabo_create_link('comment', $id, $email),
        $form
    );
}

/**
 * deletes subscription of $email to article $id
 */
function gho_commabo_delete($email = '', $id = false) {
    if (intval($id) && $email <> '') {
        return safe_delete(
            'txp_commabo',
            "`article` = '".$id."' AND `email` = '".$email."'"
        );
    } elseif ($id == false && $email <> ''){
        return safe_delete(
            'txp_commabo',
            "`email` = '".$email."'"
        );
    } else return false;
}

/**
 * creates URLs used by gho_commabo
 *
 * @param integer $id ID of the article relevant for the subscription
 * @param string $email email address that will be unsubscribed
 * @return string URL that unsubscribes the user from this article
 */
function gho_commabo_create_link($what, $id = false, $email = false){
    $url = permlinkurl_id(intval($id));
    $url .= (strstr($url, '?')) ? "&" : "?";
    switch ($what){
        case 'unsubscribe':
            $url .= 'commabodelete='.$email;
            break;
        case 'optin':
            $url .= 'commabooptin='.md5($id.$email);
            break;
    }
    return $url;
}

/**
 * <txp:gho_comments_invite />
 */
function gho_comments_invite($atts) {
    global $thisarticle;
    if (is_array($atts)){
        extract($atts);
    };
    $id = $thisarticle['thisid'];
    $commentdata = safe_rows("Annotate, AnnotateInvite", "textpattern", "ID='$id'");
    $showcount = (empty($showcount))    ? "yes"         : $showcount;
    $wraptag =   (empty($wraptag))      ? ''            : $wraptag;
    $class =     (empty($class))        ? "comm-invite" : $class;
    $zero =      (empty($zero))         ? ''            : $zero;
    $one =       (empty($one))          ? " comment"    : $one;
    $more =      (empty($more))         ? " comments"   : $more;
    $popup =     (isset($popup) && $popup == 1) ? true  : false;
    $format =    (isset($format) && $format == 'text') ? 'text' : 'link';
    $nocomment = (!isset($nocomment))
        ? $commentdata[0]["AnnotateInvite"]
        : ((empty($nocomment))
            ? ''
            : $nocomment
    );
    if (!empty($zero)) {
        $commentdata[0]['AnnotateInvite'] = $zero;
    };
    $total_comments = safe_count('txp_discuss', "parentid='$id' and visible='1'");
    $popupmarkup = ($popup)
        ? ' target="_blank"'
        : '';
    if ($commentdata[0]["Annotate"] == 1) {
        $tmp_count = ($showcount == "yes") ? $total_comments : "";
        $before = ($total_comments == 0)
            ? $commentdata[0]["AnnotateInvite"]
            : (($total_comments == 1)
                ? $tmp_count.$one
                : (($total_comments > 1)
                    ? $tmp_count.$more
                    : ''
            )
        );
        $out = '<span class="'.$class.'">';
        if ($format == 'link') $out .= '<a href="'.permlinkurl($thisarticle).'#'.gTxt('comment').'"'.$popupmarkup.'>';
        $out .= $before;
        if ($format == 'link') $out .= '</a>';
        $out .= '</span>';
    } elseif (empty($nocomment)) {
        $out = '';
    } else {
        $out = '<span class="'.$class.'">';
        $out .= ($total_comments > 0 && $format == 'link')
            ? '<a href="'.permlinkurl($thisarticle).'#'.gTxt('comment').'"'.$popupmarkup.'>'
            : '';
        $out .= $nocomment;
        $out .= ($total_comments > 0 && $format == 'link')
            ? '</a>'
            : '';
        $out .= '</span>';
    };
    if (!empty($wraptag)) {
        return tag($out,$wraptag);
    };
    return $out;
}

/**
 * <txp:gho_last_commentator />
 *
 * @final
 */
function gho_last_commentator($atts=false) {
    global $thisarticle;
    $id         = $thisarticle['thisid'];
    $separator  = (empty($atts['separator']))   ? ', '                  : $atts['separator'];
    $limit      = (empty($atts['limit']))       ? 1                     : intval($atts['limit']);
    $postfix    = (empty($atts['postfix']))     ? ')'                   : $atts['postfix'];
    $prefix     = (empty($atts['prefix']))      ? '(last commented by ' : $atts['prefix'];
    $linknames  = (empty($atts['linknames']))   ? false                 : true;
    $wraptag    = (empty($atts['wraptag']))     ? ''                    : $atts['wraptag'];
    $class      = (empty($atts['class']))       ? ''                    : $atts['class'];

    $darr       = safe_rows(
        'discussid, name, posted, parentid, visible',
        'txp_discuss',
        "parentid='$id' AND visible='1' GROUP BY name ORDER BY posted DESC LIMIT $limit"
    );
    $comment_display    = safe_rows('Annotate', 'textpattern', "ID='$id'");
    $allowcomments      = $comment_display[0]['Annotate'];
    if ($allowcomments == 1){
        foreach($darr as $vars){
            $names[] = ($linknames == true)
                ? '<a href="'.permlinkurl($thisarticle).'#c'.$vars['discussid'].'">'.$vars['name'].'</a>'
                : $vars['name'];
        };
        $out = (!empty($names))
            ? $pretext.implode($separator, $names).$posttext
            : false;
        if (!empty($wraptag) && (!empty($out))) {
            return tag($out, $wraptag, (!empty($class)) ? 'class='.$class : '');
        };
        return $out;
    };
}

/**
 * <txp:gho_comment_num />
 *
 * @staticvar int $gho_comment_num
 * @return int incrementing counter each time the tag is called
 * @final
 */
function gho_comment_num() {
    static $gho_comment_num = 1;
    return $gho_comment_num++;
}

/**
 *  helper, functions for verifying emailaddresses, old stuff from my nineties
 */
if (!function_exists('emailcheck')){
    function emailcheck($eaddr=""){
    /**
     * @var string Regexp f?r matching auf valide Emailsyntax
     */
        $pattern = "/^([a-zA-Z0-9])+([\.a-zA-Z0-9_-])*@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/";
        if (empty($eaddr)) {
            return false;
        } elseif (!preg_match($pattern, $eaddr)){
            return false;
        } else {
            $laddr = "";
            $laddr = $eaddr;
            $laddr = preg_replace('/^.*</','', $laddr);
            $laddr = preg_replace('/>.*$/','',$laddr);
            if (preg_match('/^\@.*:/',$laddr)){
                list($domain,$addr_spec) = preg_split('/:/',$laddr);
                $domain = preg_replace('/^\@/','',$domain);
                if (!is_domain($domain)) {return false;}
                $laddr = $addr_spec;
            };
            return(is_addr_spec($laddr));
        };
    }
	/**#@+
	 * @access private
	 * @since 1.0.1 (26.03.2004)
	 * @version 1.0.1
	 */
    function is_addr_spec ($eaddr = ""){
        list($local_part,$domain) = preg_split('/\@/',$eaddr);
        if (!is_local_part($local_part) || !is_domain($domain)){
            return false;
        };
        return true;
    }
    function is_local_part ($local_part = ""){
        if (empty($local_part)){
            return false;
        };
        $bit_array = preg_split('/\./',$local_part);
        while (list(,$bit) = each($bit_array)){
            if (!is_word($bit)){
                return false;
            };
        };
        return true;
    }
    function is_word($word = ""){
        if (preg_match('/^".*"$/i',$word)){
            return(is_quoted_string($word));
        };
        return(is_atom($word));
    }
    function is_quoted_string($word = ""){
        $word = preg_replace('/^"/','',$word);
        $word = preg_replace('/"$/','',$word);
        $word = preg_replace('/\\+/','',$word);
        if (preg_match('/\"\\\r/',$word)){
            return false;
        };
        return true;
    }
    function is_atom($atom = ""){
        if ((preg_match('/[\(\)\<\>\@\,\;\:\\\"\.\[\]]/',$atom)) || (preg_match('/\040/',$atom)) || (preg_match('/[\x00-\x1F]/',$atom))) {
            return false;
        };
        return true;
    }
    function is_domain($domain = ""){
        if (empty($domain)){
            return false;
        };
        if (!preg_match('/\./',$domain)){
            return false;
        };
        $dbit_array = preg_split('/./',$domain);
        while (list(,$dbit) = each($dbit_array)){
            if (!is_sub_domain($dbit)){
                return false;
            };
        };
        return true;
    }
    function is_sub_domain($subd = ""){
        if (preg_match('/^\[.*\]$/',$subd)){
            return(is_domain_literal($subd));
        };
        return(is_atom($subd));
    }
    function is_domain_literal($dom = ""){
        $dom = preg_replace('/\\+/','',$dom);
        if (preg_match('/[\[\]\\\r]/',$dom)){
            return false;
        };
        return true;
    }
	/**#@-*/
}

";s:8:"code_md5";s:32:"27bb59114788544688bfbb3b01342c40";s:4:"type";s:1:"1";}