a:11:{s:4:"name";s:7:"smd_bio";s:6:"author";s:11:"Stef Dawson";s:10:"author_uri";s:22:"http://stefdawson.com/";s:7:"version";s:4:"0.40";s:11:"description";s:44:"Customisable user biographies / profile info";s:4:"help";s:32488:"<div id="smd_help">

	<h1>smd_bio</h1>

	<p>Configure additional user biographical information to be collected when authors are created, then show that info as bylines against your articles. A bit like custom fields for user info.</p>

	<h2>Features</h2>

	<ul>
		<li>Define only the info you require to be collected about your users &#8212; totally customisable</li>
		<li>Info is entered/edited on the <em>Admin-&gt;Users</em> tab beneath the existing user info (i.e. Publishers only) but also integrates with smd_user_manager</li>
		<li>Choose from a variety of types of content: text, radio buttons, select lists, checkboxes, images&#8230;</li>
		<li>Output any pieces of biographical info in your article flow in a variety of ways</li>
		<li>Image thumbnail preview/selection on the <em>Admin-&gt;Users</em> tab</li>
		<li>Optional <span class="caps">CSS</span> to modify the layout of the <em>Admin-&gt;Users</em> tab</li>
	</ul>

	<h2>Author / Credits</h2>

	<p><a href="http://stefdawson.com/contact">Stef Dawson</a>. The plugin is a logical extension of pvc_users_info by Peter V. Cook (the smd_bio_articles tag is essentially the same as pvc_author_articles). Thanks also to pieman for setting the wheels in motion and net-carver for his inimitable knack of making things better.</p>

	<h2>Installation / Uninstallation</h2>

	<p class="important">Requires Textpattern 4.4.1+ and jQuery 1.6.1+</p>

	<p>Download the plugin from either <a href="http://textpattern.org/plugins/1116/smd_bio">textpattern.org</a>, or the <a href="http://stefdawson.com/sw">software page</a>, paste the code into the <span class="caps">TXP</span> <em>Admin-&gt;Plugins</em> pane, install and enable the plugin. The plugin&#8217;s tables will be installed automatically. Visit the <a href="http://forum.textpattern.com/viewtopic.php?id=31496">forum thread</a> for more info or to report on the success or otherwise of the plugin.</p>

	<p>When you visit the <em>Extensions-&gt;Bio config</em> page, the plugin&#8217;s tables will be checked and installed/upgraded automatically if not present already. This is a convenience for people who run the plugin from the cache directory.</p>

	<p>To uninstall, delete the plugin from the <em>Admin-&gt;Plugins</em> page. <strong>All additional user tables and bio information will be removed</strong> so be sure you have backed everything up first.</p>

	<h2 id="smd_bio_config">Configuring bio fields</h2>

	<p>Visit the <em>Extensions-&gt;Bio config</em> tab. Add bio fields such as cell/work/fax numbers, department, mugshot, postal address, job title, whatever you wish. Just add one at a time and hit Save in between. The fields will be listed below the form, and can be sorted at will. Each field comprises:</p>

	<dl>
		<dt><span class="atnm">Name</span></dt>
		<dd>An internal name with which you wish to refer to your bio field. Avoid characters such as spaces and &#8216;weird&#8217; characters here. <strong>This cannot be changed, once set</strong></dd>
		<dt><span class="atnm">Title</span></dt>
		<dd>A human-friendly name for your bio field. This is displayed to the left of the input control on the <em>Admin-&gt;Users</em> panel, and as a label on your article pages</dd>
		<dt><span class="atnm">Type</span></dt>
		<dd>The type of data you wish to collect. This will be the flavour of input control you see on the <em>Admin-&gt;Users</em> panel</dd>
		<dt><span class="atnm">Column type</span> (click &#8216;More&#8217; to toggle)</dt>
		<dd>The database column type that is created. If you don&#8217;t know what this is, just accept the default, otherwise specify which type of data this column is to hold</dd>
		<dd>Note that some types of biographical information (e.g. images) are forced to be of a certain column type</dd>
		<dd><span class="caps">IMPORTANT</span>: if you alter this after it has been created, any existing bio data in the field will be altered to suit and <strong>you may lose information</strong>. Please backup first</dd>
		<dt><span class="atnm">Column size</span> (click &#8216;More&#8217; to toggle)</dt>
		<dd>Some column types &#8212; most notably the varchar types &#8212; require a column width (or display width) to be specified. Put a value here if you wish to use a size other than the default. If you don&#8217;t know what this is, just accept the default</dd>
		<dd>Note that most column types do not require a size so if you do specify one it will be ignored</dd>
		<dd><span class="caps">IMPORTANT</span>: if you alter this after it has been created, any existing bio data in the field will be altered to suit and <strong>you may lose information</strong>. Please backup first</dd>
		<dt><span class="atnm">Size</span></dt>
		<dd>The dimensions of the chosen input control. Takes one or two comma-separated values, the interpretation of which depends on the field <em>Type</em>:
	<dl>
		<dd>For text-based input fields, the first is the width of the box (in characters) and the second is the maximum number of characters a user can type (0 = leave at default)</dd>
		<dd>For textareas, it is the width and height of the box in characters, respectively</dd>
		<dd>For images, the two values are the x and y dimensions of the image/thumbnail on the <em>Admin-&gt;Users</em> tab. If only one value is given, the image will be square. If either value is omitted, the image or thumbnail dimensions (as stored in the database) are used instead</dd>
		<dd>For other types, the Size is currently unused</dd>
	</dl></dd>
		<dt><span class="atnm">Value</span></dt>
		<dd>Depends on the field <em>Type</em>:
	<dl>
		<dd>For text-based fields, this is the default value that will be placed in the text box. You can use this to initialise an entry, or offer instructions like &#8220;Type your job description here&#8221;</dd>
		<dd>For images, it can be used to specify the parent category name under which the desired images are stored. If omitted, all images are available in the image select list</dd>
		<dd>For list, radio and checkbox items, this is used to configure the available options:
	<dl>
		<dd>Either put one item per line or use a comma to separate each item</dd>
		<dd>If you just list items, they will be used as labels exactly as you define them. When referring to them with the public tags, the field <em>names</em> will be all lower case, have &#8216;non-web-safe&#8217; characters removed, and will have spaces converted to underscores. See the <a href="#smd_bio_list_example">example</a> for further details</dd>
		<dd>In select lists, you may put an empty item at the top if you wish by beginning the list with a comma</dd>
		<dd>In select lists, checkbox and radio sets you may also mark label(s) with <code>[*]</code> to indicate it is a default checked/selected value. Radio sets and single-select lists only permit one marker</dd>
	</dl></dd>
	</dl></dd>
		<dt><span class="atnm">Position</span></dt>
		<dd>The order in which the items appear on the <em>Admin-&gt;Users</em> tab</dd>
		<dd>You can use any alphanumeric system to sort, e.g <code>10, 20, 30,...</code> or <code>a, b, c...</code>. The lower the value the higher up the screen it will be</dd>
	</dl>

	<h3 id="smd_bio_list_example">Defining your own lists</h3>

	<p>There are a few of ways to define your own names and/or labels for use in select lists, radio sets and checkbox groups:</p>

<pre class="block"><code class="block">label_1
label_2
label_3
...
</code></pre>

	<p>or</p>

<pre class="block"><code class="block">label_1, label_2, label_3, ...
</code></pre>

	<p>or</p>

<pre class="block"><code class="block">name_1 =&gt; label_1, name_2 =&gt; label_2, name_3...
</code></pre>

	<p>(you may also put each name-label pair on a separate line if you wish). Here&#8217;s an example for a dropdown list of Departments:</p>

<pre class="block"><code class="block">sales =&gt; Sales
mktg =&gt; Marketing
eng =&gt; Engineering
qual =&gt; Quality assurance
it =&gt; Tech support
</code></pre>

	<p>If you defined the list as above, your field names would be <code>sales</code>, <code>mktg</code>, <code>eng</code>, <code>qual</code> and <code>it</code>, respectively.</p>

	<p>If, however, you omit the field names, viz:</p>

<pre class="block"><code class="block">Sales
Marketing
Engineering
Quality assurance
Tech support
</code></pre>

	<p>then you would refer to the fields with: <code>sales</code>, <code>marketing</code>, <code>engineering</code>, <code>quality_assurance</code>, and <code>tech_support</code>, respectively.</p>

	<p>For multiple select lists and checkbox groups you can optionally define some of the entries as defaults. For example in your <code>subscriptions</code> checkbox group:</p>

<pre class="block"><code class="block">Kerrang
Future Music[*]
NME
Sound on Sound[*]
</code></pre>

	<p>The same system applies to single or multiple select lists and radio sets, although for single selects and radio sets, only one element may be starred (if you star more, only one of the defaults will prevail).</p>

	<h2>Entering user data: <em>Admin-&gt;Users</em></h2>

	<p>Your configured fields will appear on the <em>Admin-&gt;Users</em> panel, beneath the usual crop of data input fields. Simply enter data in them and it will be saved along with the existing user data. Hit <em>Edit</em> and any configured info will be retrieved for editing.</p>

	<p>When choosing an image, you can either type its ID in the box or use the dropdown select list to choose an image. The chosen image will appear below the input controls.</p>

	<p>If you wish to alter the layout of the input controls, you may create a standard stylesheet in <em>Presentation-&gt;Style</em> and name it <code>smd_bio</code>. It will be loaded automatically when you visit the <em>Admin-&gt;Users</em> panel.</p>

	<p>To quickly view the extended bio information for a user, hover over the <em>Edit</em> link of an item in the list; a tooltip will appear showing some of the extended bio. The data is fetched from the server when you first hover over the <em>Edit</em> link, so it may take a few seconds to load (and may require you to wiggle the mouse around a bit to get it to display, sorry!)</p>

	<h2>Entering user data: <em>Admin-&gt;User manager</em></h2>

	<p>If you have the smd_user_manager plugin installed, smd_bio will hook into that plugin. When you hover over the login name of an entry in the User list, detailed bio information is retrieved and displayed as a tootltip. Editing a user will also permit Bio information to be entered.</p>

	<h2>Displaying user bio info on your site</h2>

	<p>When you create a new <em>field</em> in the <a href="#smd_bio_config">Bio Config</a> pane, it has various attributes like name, title, size, value, etc. The <code>name</code> is the key: that is how you refer to the field using the <code>field</code> or <code>fields</code> attributes in the various tags (below).</p>

	<p>Each field has a variety of pieces of data that you may display. These are known as <code>items</code> and the primary ones are:</p>

	<ol>
		<li><code>value</code> : the current value of the field that has been selected / typed by the user in their profile.</li>
		<li><code>title</code> : the human friendly title (a.k.a. <em>label</em>) that you have assigned to your field in the Bio Config screen &#8212; this is handy if you want to print out the title alongside the data value itself, e.g. Department: sales.</li>
		<li><code>name</code> : the field&#8217;s key (shown in the &#8216;Name&#8217; column on the Bio Config panel). This is of less everyday use, but when building your own input screens for capturing bio data, it becomes handy so you can tell mem_form the name of the field it needs to store the bio data item in.</li>
	</ol>

	<p>The other items are useful for displaying counters and such like, or for diving deeper into the available sub-items in lists, radio sets, checkboxes, etc.</p>

	<p>So, to recap: <code>field</code> = your bio thingamybob (it&#8217;s Name / Key), and <code>item</code> = the part of thingamybob you want to display: its value, title or name (a.k.a. key).</p>

	<h3 id="smd_bio_info">Tag: <code>&lt;txp:smd_bio_info&gt;</code></h3>

	<p>Use this tag to display pieces of info from a user&#8217;s biography. One or more of these tags can be employed depending on how you prefer to work. It may also be used as a container (or via the <code>form</code> attribute) to allow you to embed other Textpattern tags and/or special <a href="#smd_bio_repkeys">replacement keys</a> to format the output.</p>

	<p>This tag requires article context so you normally use it inside <code>&lt;txp:if_individual_article&gt;</code> tags. By default it will look up the author of the currently viewed article and display the given bio fields from that author.</p>

	<p>If you&#8217;re trying to display bio info in a sidebar or on a list page that does not necessarily have article context, you need to specify the author(s) that you wish to display bio info from. In v0.3x you did that with the <code>authors</code> attribute; in v0.4x you wrap your <code>&lt;txp:smd_bio_info&gt;</code> tag in a <a href="#smd_bio_author" style="text-align:left;">txp:smd_bio_author&gt;</a> tag.</p>

	<p>Use the following attributes to tweak this tag&#8217;s output. The default value is unset unless otherwise noted:</p>

	<dl>
		<dt><span class="atnm">fields</span></dt>
		<dd>List of bio field <em>names</em> you wish to display, in the order you wish to display them.</dd>
		<dd>Note you can also display bio information from the standard <span class="caps">TXP</span> user table, i.e. you can use any of the following, (case sensitive) : <code>user_id</code>, <code>name</code> (login name), <code>RealName</code>, <code>email</code>, <code>privs</code>, <code>last_access</code></dd>
		<dd>Default: unset (i.e. all fields)</dd>
		<dt><span class="atnm">exclude</span></dt>
		<dd>List of bio field <em>names</em> you do <strong>not</strong> wish to display. This overrides <code>fields</code></dd>
		<dt><span class="atnm">form</span></dt>
		<dd>The name of a <span class="caps">TXP</span> Form with which to process each record.</dd>
		<dd>If not specified, the tag&#8217;s container will be used.</dd>
		<dd>If the container is empty, default output is used (label and field contents).</dd>
		<dt><span class="atnm">wraptag</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around each record.</dd>
		<dt><span class="atnm">class</span></dt>
		<dd>Fixed <span class="caps">CSS</span> class name to add to each record&#8217;s wraptag.</dd>
		<dt><span class="atnm">break</span></dt>
		<dd>(X)HTML tag to put between each field.</dd>
		<dt><span class="atnm">breakclass</span></dt>
		<dd><span class="caps">CSS</span> class name to add to each field&#8217;s wraptag.</dd>
		<dd>The default is to automatically assign <code>smd_bio_*name_of_field*</code> (e.g. smd_bio_cell, smd_bio_dept, etc).</dd>
		<dt><span class="atnm">labeltag</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around the field&#8217;s label.</dd>
		<dt><span class="atnm">label</span></dt>
		<dd>Whether to display a label or not for each field. Choose from:
	<dl>
		<dd><strong>1</strong> : (default) Display the Title of the field</dd>
		<dd><strong>0</strong> : Display the Name of the field</dd>
		<dd><strong>some label</strong> : Display the given text as a label</dd>
		<dd>&#8220;&#8221; (i.e. empty) : Do not display any label</dd>
	</dl></dd>
		<dt><span class="atnm">var_prefix</span></dt>
		<dd>Set the prefix that this tag uses for the replacement keys.</dd>
		<dd>Default: <code>smd_bio_</code></dd>
		<dt><span class="atnm">show_empty</span></dt>
		<dd>Choose if you wish to hide (0) or show (1) any items that have no data assigned to them.</dd>
		<dd>Default: 0</dd>
	</dl>

	<h3 id="smd_bio_repkeys"><code>&lt;txp:smd_bio_info&gt;</code> replacement keys</h3>

	<p>Inside the smd_bio_info <code>form</code> or container you may display actual content in one of two ways. Firstly you can utilise special replacement keys that allow you to display any pieces of field content. Alternatively you can use the <a href="#smd_bio_data">smd_bio_data tag</a>.</p>

	<p>The core replacement keys are:</p>

	<dl>
		<dt><code>{smd_bio_*field*}</code></dt>
		<dd>The value of the named field (e.g. <code>smd_bio_cell</code>, <code>smd_bio_department</code>, etc).</dd>
		<dt><code>{smd_bio_*field*_name}</code></dt>
		<dd>Sanitized name of the column corresponding to this named field.</dd>
		<dt><code>{smd_bio_*field*_title}</code></dt>
		<dd>Human-friendly title you assigned this named field.</dd>
		<dt><code>{smd_bio_*field*_class}</code></dt>
		<dd>Name of the class associated with this named field.</dd>
	</dl>

	<p>If you have elected to extract a list item such as radio, list or checkbox you will have some more replacement keys in the following format:</p>

	<dl>
		<dt><code>{smd_bio_*field*_item_N}</code></dt>
		<dd>The value of each named item in turn, where N starts at 1 and increments.</dd>
		<dt><code>{smd_bio_*field*_title_N}</code></dt>
		<dd>The value of each named item&#8217;s title in turn. Again, N starts at 1 and counts up for every item in your list.</dd>
		<dt><code>{smd_bio_*field*_chosen_item_N}</code></dt>
		<dd>The value of each selected item in turn, where N starts at 1 and increments.</dd>
		<dd>For select and radio lists there will be only one; for checkbox groups there may be more.</dd>
		<dt><code>{smd_bio_*field*_chosen_title_N}</code></dt>
		<dd>The value of each selected item&#8217;s label in turn, where N starts at 1 and increments.</dd>
		<dt><code>{smd_bio_*field*_item_count}</code></dt>
		<dd>The total number of elements in the named list.</dd>
		<dt><code>{smd_bio_*field*_chosen_count}</code></dt>
		<dd>The total number of selected elements in the named list.</dd>
	</dl>

	<p>Further, if you are displaying just a single <code>field</code>, these replacements (backwards compatible with smd_bio v0.3x) are present:</p>

	<dl>
		<dt><code>{smd_bio_info_item}</code></dt>
		<dd>The value of the current field &#8212; Deprecated: use <code>{smd_bio_info_value}</code> instead.</dd>
		<dt><code>{smd_bio_info_name}</code></dt>
		<dd>The sanitized name of the column corresponding to the field.</dd>
		<dt><code>{smd_bio_info_title}</code></dt>
		<dd>The human-friendly title you assigned the field.</dd>
		<dt><code>{smd_bio_info_itemclass}</code></dt>
		<dd>The name of this field&#8217;s class &#8212; Deprecated: use <code>{smd_bio_info_class}</code> instead.</dd>
	</dl>

	<p>If you wish to see an entire list of available replacement keys, add <code>debug=&quot;1&quot;</code> to your smd_bio_info tag.</p>

	<h3 id="smd_bio_author">Tag: <code>&lt;txp:smd_bio_author&gt;</code></h3>

	<p>Wrap this tag around <code>&lt;txp:smd_bio_info&gt;</code> tags to display information from more than one user. The contained content will be displayed for each author.</p>

	<dl>
		<dt><span class="atnm">author</span></dt>
		<dd>Comma-separated list of author login names from which you wish to display info.</dd>
		<dd>If omitted, the current (individual article) author will be used &#8212; functionally the same as if you just used <code>&lt;txp:smd_bio_info /&gt;</code> without the author wrapper tag.</dd>
		<dd>You may specify any of your comma-separated items as <code>SMD_PRIVS:</code> and then colon-separate the priv numbers. Any users with those matching level(s) will be displayed.</dd>
		<dt><span class="atnm">form</span></dt>
		<dd>The name of a <span class="caps">TXP</span> Form with which to process each author.</dd>
		<dd>If not specified, the tag&#8217;s container will be used.</dd>
		<dd>If the container is empty, the name of the author is displayed.</dd>
		<dt><span class="atnm">wraptag</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around the entire output.</dd>
		<dt><span class="atnm">class</span></dt>
		<dd><span class="caps">CSS</span> class name to add to the wraptag.</dd>
		<dt><span class="atnm">break</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around each author record.</dd>
		<dt><span class="atnm">breakclass</span></dt>
		<dd><span class="caps">CSS</span> class name to apply to each break tag.</dd>
		<dt><span class="atnm">labeltag</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around the item&#8217;s label.</dd>
		<dt><span class="atnm">label</span></dt>
		<dd>The label text to display above all author info</dd>
	</dl>

	<h3 id="smd_bio_data">Tag: <code>&lt;txp:smd_bio_data&gt;</code></h3>

	<p>Inside your smd_bio_info form or container you can either use the <a href="#smd_bio_repkeys">replacement keys</a> or this tag. Use the following attributes to select which piece of information to display:</p>

	<dl>
		<dt><span class="atnm">field</span></dt>
		<dd>The bio field from you wish to display some information (e.g. cell, phone, address, department, &#8230;)</dd>
		<dt><span class="atnm">item</span></dt>
		<dd>The actual piece of information you need about the field. Choose from:
	<dl>
		<dd><strong>value</strong> : the field&#8217;s content. Functionally equivalent to <code>{smd_bio_*field*}</code></dd>
		<dd><strong>name</strong> : the field&#8217;s name, as defined on the Bio Config tab. Equivalent to <code>{smd_bio_*field*_name}</code></dd>
		<dd><strong>title</strong> : the field&#8217;s &#8220;human friendly&#8221; title, as defined on the Bio Config tab. Equivalent to <code>{smd_bio_*field*_title}</code></dd>
		<dd><strong>value_N</strong> : the value of the Nth item in a list (select, radio, checkbox group)</dd>
		<dd><strong>title_N</strong> : the title of the Nth item in a list</dd>
		<dd><strong>chosen_item_N</strong> : the value of the Nth selected item in a list  (select, radio, checkbox group)</dd>
		<dd><strong>chosen_title_N</strong> : the label of the Nth selected item in a list</dd>
		<dd><strong>value_count</strong> : the total number of list items</dd>
		<dd><strong>chosen_count</strong> : the total number of selected list items</dd>
	</dl></dd>
		<dd>Default: <code>value</code></dd>
	</dl>

	<h3 id="smd_if_bio">Tag: <code>&lt;txp:smd_if_bio&gt;</code></h3>

	<p>A simple conditional for testing a field / item. Must be used inside a <code>&lt;tx:smd_bio_info /&gt;</code> tag to test for the existence/value of one of your chosen bio items. Use smd_if for more complex conditional logic.</p>

	<dl>
		<dt><span class="atnm">field</span></dt>
		<dd>The bio field from you wish to check (e.g. department, preferred_contact, phone_number,&#8230;)</dd>
		<dt><span class="atnm">item</span></dt>
		<dd>The actual piece of information you want to compare from the field. Choose from the same items as defined in the <code>item</code> attribute for <a href="#smd_bio_data">smd_bio_data</a></dd>
		<dd>Default: <code>value</code></dd>
		<dt><span class="atnm">value</span></dt>
		<dd>The value you wish to compare the field/item against.</dd>
		<dd>If omitted, the tag will just check for the existence of the given field/item</dd>
	</dl>

	<h3 id="smd_bio_iterate">Tag: <code>&lt;txp:smd_bio_iterate&gt;</code></h3>

	<p>Step through select list, checkbox, and radio sets with this tag, displaying info about each option as you go.</p>

	<dl>
		<dt><span class="atnm">field</span></dt>
		<dd>The bio field over which you wish to iterate (e.g. preferred_contact, subscription, favourite_rockstar, &#8230;). Must be a &#8216;list&#8217; or &#8216;group&#8217; field.</dd>
		<dt><span class="atnm">using</span></dt>
		<dd>The type of info you want to iterate over. Choose from:
	<dl>
		<dd><code>chosen</code>: step over chosen (selected, checked) items</dd>
		<dd><code>all</code>: step over all items in the group, whether selected or not</dd>
	</dl></dd>
		<dd>Default: <code>chosen</code></dd>
		<dt><span class="atnm">display</span></dt>
		<dd>The piece of information you wish to output from the option. This attribute is ignored if you use a <code>form</code> or the container. Choose from:
	<dl>
		<dd><code>item</code>: the internal name of the option</dd>
		<dd><code>title</code>: the option&#8217;s human-friendly title</dd>
	</dl></dd>
		<dd>Default: <code>title</code></dd>
		<dt><span class="atnm">form</span></dt>
		<dd>The name of a <span class="caps">TXP</span> Form with which to process each option.</dd>
		<dd>If not specified, the tag&#8217;s container will be used.</dd>
		<dd>If the container is empty, default output is used (the option&#8217;s value).</dd>
		<dt><span class="atnm">wraptag</span></dt>
		<dd>(X)HTML tag (without angle brackets) to wrap around the group.</dd>
		<dt><span class="atnm">class</span></dt>
		<dd>Fixed <span class="caps">CSS</span> class name to add to the group&#8217;s wraptag.</dd>
		<dt><span class="atnm">break</span></dt>
		<dd>(X)HTML tag to put between each option.</dd>
		<dt><span class="atnm">breakclass</span></dt>
		<dd><span class="caps">CSS</span> class name to add to each option&#8217;s wraptag.</dd>
		<dt><span class="atnm">var_prefix</span></dt>
		<dd>Set the prefix that this tag uses for the replacement keys.</dd>
		<dd>Default: <code>smd_bio_</code></dd>
		<dt><span class="atnm">limit</span></dt>
		<dd>The maximum number of options to iterate over.</dd>
		<dd>Default: 0 (i.e. all of them)</dd>
		<dt><span class="atnm">offset</span></dt>
		<dd>The number of options to skip before starting to display options.</dd>
		<dd>Default: 0</dd>
	</dl>

	<h3 id="smd_bio_iterate_reps"><code>&lt;txp:smd_bio_iterate&gt;</code> replacement keys</h3>

	<dl>
		<dt><code>{smd_bio_this_item}</code></dt>
		<dd>The name of the current field.</dd>
		<dt><code>{smd_bio_this_title}</code></dt>
		<dd>The human-friendly title of the current field.</dd>
		<dt><code>{smd_bio_this_index}</code></dt>
		<dd>The option number count (starting from 1).</dd>
	</dl>

	<p>You may also use the <code>&lt;txp:smd_bio_data /&gt;</code> tag to render the relevant items.</p>

	<h3 id="smd_bio_articles">Tag: <code>&lt;txp:smd_bio_articles&gt;</code></h3>

	<p>A simple convenience wrapper for <code>&lt;txp:article_custom /&gt;</code> that sets the <code>author</code> attribute to the person who wrote the current article. If you specify an author, that person will be used instead. In all other regards, the tag functions identically to <a href="http://textpattern.net/wiki/index.php?title=article_custom">article_custom</a> and can be used as a container if you wish.</p>

	<p class="important"><span class="caps">IMPORTANT</span>: take care when using this tag inside your default form. If you do not specify your own container or a dedicated <code>form</code>, you will receive a <em>circular reference error</em> from <span class="caps">TXP</span> as it tries to call the default form, which calls the default form, which calls the default form&#8230;</p>

	<h2>Examples</h2>

	<p>TO <span class="caps">REVISE</span>.</p>

	<h3 id="eg1">Example 1: List bio fields from author of current article</h3>

<pre class="block"><code class="block">&lt;txp:smd_bio_info
     items=&quot;jobtitle, extension, cell, department&quot;
     labeltag=&quot;dt&quot; wraptag=&quot;dl&quot;
     break=&quot;dd&quot; class=&quot;profile&quot; /&gt;
</code></pre>

	<p>Shows the job title, work&#8217;s extension number, cell phone number and department of the current author, as a definition list with class <code>profile</code>.</p>

	<h3 id="eg2">Example 2: List profiles for named + priv level users</h3>

<pre class="block"><code class="block">&lt;txp:smd_bio_author wraptag=&quot;div&quot; class=&quot;authors&quot;
     author=&quot;mr_pub, SMD_PRIVS:4:3&quot;&gt;
   &lt;txp:smd_bio_info
     items=&quot;name, RealName, department&quot;
     labeltag=&quot;dt&quot; wraptag=&quot;dl&quot;
     break=&quot;dd&quot; /&gt;
&lt;/txp:smd_bio_author&gt;
</code></pre>

	<p>Shows the name, real name and department of all <em>Copy Editors</em> and <em>Staff Writers</em> and the user &#8216;mr_pub&#8217;.</p>

	<h3 id="eg3">Example 3: Using smd_bio_articles and replacement keys</h3>

<pre class="block"><code class="block">&lt;txp:smd_bio_info items=&quot;photo&quot; label=&quot;&quot;&gt;
   &lt;txp:image id=&quot;{smd_bio_photo}&quot; /&gt;
&lt;/txp:smd_bio_info&gt;
&lt;txp:smd_bio_info items=&quot;department, RealName&quot;&gt;
   Recent articles by
   &lt;a href=&quot;/desks/{smd_bio_department}&quot;&gt;
        {smd_bio_RealName}
     &lt;/a&gt;:
&lt;/txp:smd_bio_info&gt;
&lt;txp:smd_bio_articles limit=&quot;6&quot;
     wraptag=&quot;ul&quot; break=&quot;li&quot;&gt;
   &lt;txp:permlink&gt;&lt;txp:title /&gt;&lt;/txp:permlink&gt;
&lt;/txp:smd_bio_articles&gt;
</code></pre>

	<p>Displays the author photo, the author&#8217;s RealName linked to the section that explains about the department to which she belongs, then lists the 6 most recent articles by her. Note the use of <code>label=&quot;&quot;</code> to suppress the automatic labelling of items and our use of a replacement key to feed <code>&lt;txp:image /&gt;</code> with the ID of the selected photo.</p>

	<h3 id="eg4">Example 4: checkboxes, lists and radios</h3>

<pre class="block"><code class="block">&lt;txp:smd_bio_author=&quot;SMD_PRIVS:5&quot;&gt;
   &lt;txp:smd_bio_info items=&quot;name, image, contact_by,
      subscribed, department&quot; prefix=&quot;bio_&quot;&gt;
   &lt;a class=&quot;image&quot;
     href=&quot;/blog/{bio_name}&quot;
     title=&quot;browse other posts by this author&quot;&gt;
      &lt;img class=&quot;thumb&quot;
        src=&quot;/images/{bio_image}.jpg&quot; /&gt;
   &lt;/a&gt;
   &lt;div class=&quot;summary&quot;&gt;
      &lt;h3&gt;Department&lt;/h3&gt;{bio_department}
      &lt;h3&gt;Bio&lt;/h3&gt;{bio_profile}
      &lt;h3&gt;Preferred contact method&lt;/h3&gt;{bio_contact_by}
      &lt;h3&gt;Subscribed to&lt;/h3&gt;{bio_subscribed}
   &lt;/div&gt;
&lt;/txp:smd_bio_info&gt;
</code></pre>

	<h2>Changelog</h2>

	<ul>
		<li>14 Jul 09 | 0.1 | Initial (non-public) release</li>
		<li>21 Aug 09 | 0.2 | First public release ; no image/thumb output ; experimental <code>options</code> attribute removed ; container/form accepts <span class="caps">TXP</span> tags ; fixed textbox size limit (thanks MattD)</li>
		<li>31 Aug 09 | 0.3 | Removed <code>item</code> attribute ; fixed warning message if using single items ; hidden pref <code>smd_bio_sanitize_name</code> forces sanitized login names</li>
		<li>08 Jun 10 | 0.31 | Javascript only appears on admin tab (thanks redbot/Gocom)</li>
		<li>08 Jul 11 | 0.40 | Improved performance and reduced server load by up to 90% (thanks jakob) ; plugin lifecycle aware ; permitted configurable database column types/sizes ; removed base64 css ; added smd_bio_author, smd_bio_data, smd_bio_iterate, and smd_if_bio tags ; added <code>var_prefix</code> and <code>show_empty</code> attributes ; deprecated <code>author</code>, <code>labelclass</code>, and <code>itemwraptag</code> (now <code>break</code>) ; altered replacement key names ; fixed and improved hover tooltips on <em>Admin-&gt;Users</em> tab ; increased default varchar size to 255 (thanks hablablow) ; added multi-select lists and permitted checkboxes to be marked as default</li>
	</ul>

</div>
<!-- *** BEGIN PLUGIN CSS *** -->
<style type="text/css">
#smd_help { line-height:1.6; }
#smd_help code { font-weight:bold; font: 105%/130% "Courier New", courier, monospace; background-color: #f0e68c; color:#222; }
#smd_help code.block { font-weight:normal; border:1px dotted #999; display:block; margin:10px 10px 20px; padding:10px; }
#smd_help h1 { font: 220% Georgia, serif; margin: 0; text-align: center; }
#smd_help h2 { border-bottom: 1px solid black; padding:10px 0 0; font: 180% Georgia, serif; }
#smd_help h3 { font: bold 140% Georgia, serif; letter-spacing: 1.5px; margin: 25px 0 6px; border-bottom:1px dashed; }
#smd_help h4 { font: bold 120% Georgia, serif; letter-spacing: 1px; margin: 10px 0 0; }
#smd_help .atnm { font-weight:bold; font-size: 110%; }
#smd_help .mand { background:#eee; border:1px dotted #999; }
#smd_help table { width:90%; text-align:center; padding-bottom:1em; border-collapse:collapse; }
#smd_help td, #smd_help th { border:1px solid #999; padding:.5em; }
#smd_help ul { list-style-type:square; }
#smd_help .important { color:red; }
#smd_help li { margin:5px 20px 5px 30px; }
#smd_help .break { margin-top:5px; }
#smd_help dl dd { margin:2px 15px; }
#smd_help dl dd:before { content: "\21d2\00a0"; }
#smd_help dl dd dl { padding: 0 15px; }
</style>
<!-- *** END PLUGIN CSS *** -->
";s:4:"code";s:57306:"/**
 * smd_bio
 *
 * A Textpattern CMS plugin for storing additional biographical author data:
 *  -> Create checkboxes, select lists, radio buttons, text input, image, etc fields
 *  -> Data is captured and stored when a user is created
 *  -> Allow people to manage their own profiles via smd_user_manager
 *
 * @author Stef Dawson
 * @link   http://stefdawson.com/
 */
// TODO:
// <txp:smd_bio_input /> to display an input field of the appropriate type
// Integration with mem_form.submit so divert bio data to the appropriate tables
//  Use an array like $types = array( 'int' => array( sql_type='INTEGER', widget="TEXT", widget_constraint="is_integer" ), );
//   --> Populate the select box from this array
//  Ability to specify wildcards/matches for fields/authors in the client tag
//  Specify tooltip extended bio information in prefs
if (@txpinterface == 'admin') {
	add_privs('smd_bio', '1');
	register_tab('extensions', 'smd_bio', smd_bio_gTxt('admin_tab'));
	register_callback('smd_bio_dispatcher', 'smd_bio');
	register_callback('smd_bio_fields', 'author_ui', 'extend_detail_form');
	register_callback('smd_bio_admin_js', 'admin_side', 'head_end');

	// Note these are all pre TXP's involvement
	register_callback('smd_bio_save', 'admin', 'author_save', 1);
	register_callback('smd_bio_save', 'admin', 'author_save_new', 1);
	register_callback('smd_bio_delete', 'admin', 'admin_multi_edit', 1);
	register_callback('smd_bio_welcome', 'plugin_lifecycle.smd_bio');

	// Doesn't hurt much to add these if the plugin's not installed.
	// Since plugins are loaded in load_order and then alphabetical,
	// at this point smd_user_manager doesn't 'exist' (b < u)
	register_callback('smd_bio_save', 'smd_um', 'smd_um_save', 1);
	register_callback('smd_bio_save', 'smd_um', 'smd_um_save_new', 1);
	register_callback('smd_bio_delete', 'smd_um', 'smd_um_multi_edit', 1);
}

// Intercept image and extended bio display on Admin->Users panel
$smd_bio_step = gps('smd_bio_step');
if ($smd_bio_step == 'smd_bio_get_image') {
	smd_bio_get_image();
}
if ($smd_bio_step == 'smd_bio_get_ebio') {
	smd_bio_get_ebio();
}

// Global block
global $smd_bio_types, $smd_bio_unused, $smd_bio_coltypes, $smd_bio_styles;
$smd_bio_styles = array(
	'meta' =>
      '.smd_bio_toggler { display:none; }',
	'tooltip' =>
      '#tooltip { position:absolute; border:1px solid #333; background:#f7f5d1; padding:10px 15px; opacity:.9; color:#333; display:none; }',
);
$smd_bio_types = array(
	'text_input' => array(
			'name'    => 'Text box',
			'coltype' => 'varchar',
			'colsize' => '255',
			'fixed'   => false,
			),
	'list' => array(
			'name'    => 'Select list',
			'coltype' => 'mediumtext',
			'colsize' => '',
			'fixed'   => true,
			),
	'multilist' => array(
			'name'    => 'Multi select list',
			'coltype' => 'mediumtext',
			'colsize' => '',
			'fixed'   => true,
			),
	'radio' => array(
			'name'    => 'Radio set',
			'coltype' => 'text',
			'colsize' => '',
			'fixed'   => true,
			),
	'yesnoradio' => array(
			'name'    => 'Yes/no radio',
			'coltype' => 'text',
			'colsize' => '',
			'fixed'   => true,
			),
	'checkbox' => array(
			'name'    => 'Checkbox(es)',
			'coltype' => 'text',
			'colsize' => '',
			'fixed'   => true,
			),
	'textarea' => array(
			'name'    => 'Text area',
			'coltype' => 'mediumtext',
			'colsize' => '4096',
			'fixed'   => false,
			),
	'image' => array(
			'name'    => 'Image',
			'coltype' => 'int',
			'colsize' => '',
			'fixed'   => true,
			),
	'datetime' => array(
			'name'    => 'Date/Time',
			'coltype' => 'datetime',
			'colsize' => '',
			'fixed'   => false,
			),
);
$smd_bio_unused = array(
	'size' => array('list', 'multilist', 'radio', 'yesnoradio', 'checkbox'),
);
$smd_bio_coltypes = array(
	'varchar'    => array('title' => 'Varchar [up to 255 chars]', 'size_req' => '255'),
	'varbinary'  => array('title' => 'Binary varchar [up to 255 chars]', 'size_req' => '255'),
	'tinytext'   => array('title' => 'Tiny text [up to 255 chars]', 'size_req' => false),
	'text'       => array('title' => 'Text [up to 64KB chars]', 'size_req' => false),
	'mediumtext' => array('title' => 'Medium text [up to 16MB]', 'size_req' => false),
	'longtext'   => array('title' => 'Long text [up to 4GB]', 'size_req' => false),
	'date'       => array('title' => 'Date [YYYY-MM-DD]', 'size_req' => false),
	'time'       => array('title' => 'Time [HH:MN:SS]', 'size_req' => false),
	'datetime'   => array('title' => 'Date + time [YYYY-MM-DD HH:MN:SS]', 'size_req' => false),
	'timestamp'  => array('title' => 'Timestamp [seconds since UNIX epoch]', 'size_req' => false),
	'int'        => array('title' => 'Integer [up to 4294967295]', 'size_req' => '11'),
	'tinyint'    => array('title' => 'Tiny integer [up to 255]', 'size_req' => '3'),
	'smallint'   => array('title' => 'Small integer [up to 65535]', 'size_req' => '4'),
	'mediumint'  => array('title' => 'Medium integer [up to 16777215]', 'size_req' => '8'),
	'float'      => array('title' => 'Floating point number', 'size_req' => false),
	'double'     => array('title' => 'Double precision float', 'size_req' => false),
);

if (!defined('SMD_BIO')) {
	define("SMD_BIO", 'smd_bio');
}
if (!defined('SMD_BIO_META')) {
	define("SMD_BIO_META", 'smd_bio_meta');
}

// -------------------------------------------------------------
// Install/uninstall jumpoff point
function smd_bio_welcome($evt, $stp) {
	$msg = '';
	switch ($stp) {
		case 'installed':
			smd_bio_table_install(0);
			$msg = 'Pimp your users';
			break;
		case 'deleted':
			smd_bio_table_remove(0);
			break;
	}
	return $msg;
}

// ************************
// BIO CONFIGURATION
// ------------------------
function smd_bio_dispatcher($evt, $stp) {
	if(!$stp or !in_array($stp, array(
			'smd_bio_table_install',
			'smd_bio_table_remove',
			'smd_bio_meta_add',
			'smd_bio_meta_del',
			'smd_bio_meta_save',
			'smd_bio_save_pane_state',
		))) {
		smd_bio_config('');
	} else $stp();
}

// ------------------------
// The Extensions->Bio config panel, made up of two areas: the edit pane and the list pane
function smd_bio_config($msg) {
	smd_bio_table_install(0);

	pagetop(smd_bio_gTxt('admin_tab'), $msg);

	echo smd_bio_meta_edit();
	echo smd_bio_meta_list();
}

// ------------------------
function smd_bio_meta_edit() {
	global $smd_bio_types, $smd_bio_coltypes;

	$vars = array('step', 'id', 'title', 'name', 'type', 'coltype', 'colsize', 'size', 'val', 'position');
	$rs = array();

	extract(gpsa($vars));
	if ($id && $step == 'meta_edit') {
		$id = assert_int($id);
		$rs = safe_row('*', SMD_BIO_META, "id = $id");
		extract($rs);
	}

	if ($step == 'smd_bio_meta_save' || $step == 'smd_bio_meta_add' || $step == 'smd_bio_meta_del') {
		foreach ($vars as $var) {
			$$var = '';
		}
	}

	$caption = smd_bio_gTxt(($step == 'meta_edit') ? 'meta_edit' : 'meta_add');

	// Make the name/val pairs for the type selectInput
	$selv = array();
	foreach ($smd_bio_types as $widx => $wval) {
		$selv[$widx] = $wval['name'];
	}

	// Make the name/val pairs for the coltype selectInput
	foreach($smd_bio_coltypes as $ctype => $cdata) {
		$coltypes[$ctype] = $cdata['title'];
	}

	$toggleState = get_pref('pane_smd_bio_coltype_visible') ? true : false;

	return form(
		hed($caption, 3,' style="text-align: center;"').

		startTable('edit', '', 'edit-pane').

		tr(
			fLabelCell('name').
			($id && $step == 'meta_edit' ? td(strong($name)) : fInputCell('name', $name))
		).

		tr(
			fLabelCell('title').
			fInputCell('title', $title)
		).

		tr(
			fLabelCell('type').
			td(selectInput('type', $selv, $type, false) .sp. '<a id="smd_bio_coltype" class="lever'.(($toggleState) ? ' expanded' : '').'" href="#">'.smd_bio_gTxt('more').'</a>')
		).

		tr(
			fLabelCell(smd_bio_gTxt('coltype')).
			td(selectInput('coltype', $coltypes, $coltype, false))
			, ' class="smd_bio_coltype '.(($toggleState) ? '' : ' smd_bio_toggler').'"'
		).

		tr(
			fLabelCell(smd_bio_gTxt('colsize')).
			fInputCell('colsize', $colsize)
			, ' class="smd_bio_coltype '.(($toggleState) ? '' : ' smd_bio_toggler').'"'
		).

		tr(
			fLabelCell(smd_bio_gTxt('size')).
			fInputCell('size', $size).td(tag(smd_bio_gTxt('help'), 'a', ' class="pophelp smd_bio_size"'))
		).

		tr(
			fLabelCell('value').
			td(text_area('val', '50', '128', $val)).td(tag(smd_bio_gTxt('help'), 'a', ' class="pophelp smd_bio_val"'))
		).

		tr(
			fLabelCell(smd_bio_gTxt('position')).
			fInputCell('position', $position)
		).

		tr(
			td().
			td(
				fInput('submit', 'save', gTxt('save'), 'publish')
			)
		).

		endTable().

		eInput('smd_bio').
		($id ? hInput('id', $id).hInput('name', $name).sInput('smd_bio_meta_save') : sInput('smd_bio_meta_add')).
		tag(' ', 'span', ' id="smd_bio_size_help_text_input" title="'.smd_bio_gTxt('sizehelp_text_input').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_list" title="'.smd_bio_gTxt('help_unused').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_radio" title="'.smd_bio_gTxt('help_unused').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_yesnoradio" title="'.smd_bio_gTxt('help_unused').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_checkbox" title="'.smd_bio_gTxt('help_unused').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_textarea" title="'.smd_bio_gTxt('sizehelp_textarea').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_image" title="'.smd_bio_gTxt('sizehelp_image').'"').
		tag(' ', 'span', ' id="smd_bio_size_help_datetime" title="'.smd_bio_gTxt('sizehelp_text_input').'"').

		tag(' ', 'span', ' id="smd_bio_val_help_text_input" title="'.smd_bio_gTxt('valhelp_text_input').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_list" title="'.smd_bio_gTxt('valhelp_lrc').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_radio" title="'.smd_bio_gTxt('valhelp_lrc').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_yesnoradio" title="'.smd_bio_gTxt('valhelp_ynr').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_checkbox" title="'.smd_bio_gTxt('valhelp_lrc').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_textarea" title="'.smd_bio_gTxt('valhelp_text_input').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_image" title="'.smd_bio_gTxt('valhelp_image').'"').
		tag(' ', 'span', ' id="smd_bio_val_help_datetime" title="'.smd_bio_gTxt('valhelp_text_input').'"')
	);
}

// ------------------------
function smd_bio_meta_list() {
	global $smd_bio_types;

	extract(gpsa(array('sort', 'dir', 'crit', 'search_method')));
	if ($sort === '') $sort = get_pref('smd_bio_meta_sort_column', 'name');
	if ($dir === '') $dir = get_pref('smd_bio_meta_sort_dir', 'asc');
	$dir = ($dir == 'desc') ? 'desc' : 'asc';

	if (!in_array($sort, array('name', 'title', 'type', 'size', 'val', 'position'))) $sort = 'position';

	$sort_sql   = $sort.' '.$dir;

	set_pref('smd_bio_meta_sort_column', $sort, 'smd_bio', 2, '', 0, PREF_PRIVATE);
	set_pref('smd_bio_meta_sort_dir', $dir, 'smd_bio', 2, '', 0, PREF_PRIVATE);

	$switch_dir = ($dir == 'desc') ? 'asc' : 'desc';

	$rs = safe_rows_start('*', SMD_BIO_META, '1=1 ORDER BY '.$sort_sql);

	if ($rs) {
		echo '<form action="index.php" method="post" name="longform" onsubmit="return verify(\''.gTxt('are_you_sure').'\')">'.

		startTable('list').
		tr(
			column_head('name', 'name', 'smd_bio', true, $switch_dir, '', '', ('name' == $sort) ? $dir : '').
			column_head('title', 'title', 'smd_bio', true, $switch_dir, '', '', ('title' == $sort) ? $dir : '').
			column_head('type', 'type', 'smd_bio', true, $switch_dir, '', '', ('type' == $sort) ? $dir : '').
			column_head(smd_bio_gTxt('size'), 'size', 'smd_bio', true, $switch_dir, '', '', ('size' == $sort) ? $dir : '').
			column_head('value', 'val', 'smd_bio', true, $switch_dir, '', '', ('val' == $sort) ? $dir : '').
			column_head(smd_bio_gTxt('position'), 'position', 'smd_bio', true, $switch_dir, '', '', ('position' == $sort) ? $dir : '').
			hCell().
			hCell()
		);

		while ($a = nextRow($rs)) {
			extract(doSpecial($a));

			echo tr(
				td($name).
				td($title).
				td($smd_bio_types[$type]['name']).
				td($size).
				td($val,200).
				td($position).
				td(eLink('smd_bio', 'meta_edit', 'id', $id, gTxt('edit'))).
				td(dLink('smd_bio', 'smd_bio_meta_del', 'id', $id, 1, 'name', $name))
			);
		}

		echo endTable().'</form>';
	}
}

// ------------------------
function smd_bio_meta_make_list($val) {
	$wvals = do_list($val, '\r\n');
	if (count($wvals) == 1) {
		$wvals = do_list($val);
	}
	return join(', ', doArray($wvals, 'trim'));
}

// ------------------------
function smd_bio_meta_save() {
	global $smd_bio_unused, $smd_bio_coltypes;

	extract(doSlash(psa(array('id', 'name', 'title', 'type', 'coltype', 'colsize', 'size', 'val', 'position'))));
	$id = assert_int($id);
	$val = smd_bio_meta_make_list($val);

	// Validate the input to ensure items are emptied for types where they're unused
	foreach ($smd_bio_unused as $unused => $excludes) {
		if (in_array($type, $excludes)) {
			$$unused = '';
		}
	}

	// Validate the input to ensure items that require a column size have one...
	if (empty($colsize) && $smd_bio_coltypes[$coltype]['size_req'] !== false) {
		$colsize = $smd_bio_coltypes[$coltype]['size_req'];
	}

	// ... and that ones that don't require one are removed
	if ($smd_bio_coltypes[$coltype]['size_req'] === false) {
		$colsize = '';
	}

	// Try to adjust column type/size if applicable
	$rs = safe_alter(SMD_BIO, "CHANGE `$name` `$name` $coltype" . (($colsize) ? "($colsize)" : '') . " NULL DEFAULT NULL");

	if ($rs) {
		$rs = safe_update(SMD_BIO_META, "
			title = '$title',
			type = '$type',
			size = '$size',
			coltype = '$coltype',
			colsize = '$colsize',
			val = '$val',
			position = '$position'",
			"id = $id"
		);

		if ($rs) {
			$msg = smd_bio_gTxt('meta_updated', array('{name}' => $name));
		} else {
			$msg = array(smd_bio_gTxt('meta_update_partial', array('{name}' => $name)), E_WARNING);
		}
	} else {
		$msg = array(smd_bio_gTxt('meta_update_failed', array('{name}' => $name)), E_WARNING);
	}

	smd_bio_config($msg);
}

// ------------------------
function smd_bio_meta_add() {
	global $smd_bio_unused, $smd_bio_coltypes;

	extract(doSlash(psa(array('name', 'title', 'type', 'coltype', 'colsize', 'size', 'val', 'position'))));
	$name = smd_bio_sanitize($name);

	if (!empty($name) && smd_bio_meta_check($name)) {
		$size = (empty($size)) ? 25 : $size;

		// Validate the input to ensure items are emptied for types where they're unused
		foreach ($smd_bio_unused as $unused => $excludes) {
			if (in_array($type, $excludes)) {
				$$unused = '';
			}
		}

		// Validate the input to ensure items that require a column size have one...
		if (empty($colsize) && $smd_bio_coltypes[$coltype]['size_req'] !== false) {
			$colsize = $smd_bio_coltypes[$coltype]['size_req'];
		}
		// ... and that ones that don't require one are removed
		if ($smd_bio_coltypes[$coltype]['size_req'] === false) {
			$colsize = '';
		}

		$ret = safe_alter(SMD_BIO, "ADD `$name` $coltype" . ( ($colsize) ? "($colsize)" : '') . " NULL DEFAULT NULL");
		$val = smd_bio_meta_make_list($val);

		if ($ret) {
			$rs = safe_insert(SMD_BIO_META, "
				name = '$name',
				title = '$title',
				type = '$type',
				size = '$size',
				coltype = '$coltype',
				colsize = '$colsize',
				val = '$val',
				position = '$position'
			");

			if ($rs) {
				smd_bio_config(smd_bio_gTxt('meta_added'));
				return;
			}
		}
	}

	smd_bio_config(array(smd_bio_gTxt('meta_not_added'), E_ERROR));
}

// ------------------------
function smd_bio_meta_del() {
	extract(gpsa(array('id','name')));

	$id = assert_int($id);
	$message = smd_bio_gTxt('meta_not_deleted');

	$exists = smd_bio_meta_check($name);
	$ret = @safe_alter(SMD_BIO, "DROP COLUMN `$name`");
	if ($ret || $exists) {
		$ret = safe_delete(SMD_BIO_META, "id='$id'");
		$message = smd_bio_gTxt('meta_deleted');
	}

	smd_bio_config($message);
}

// ------------------------
function smd_bio_meta_check($col) {
	$ucols = getThings('describe `'.PFX.'txp_users`');
	$bcols = getThings('describe `'.PFX.SMD_BIO.'`');
	$cols = array_merge($ucols, $bcols);
 	return (!in_array($col, $cols));
}

// ************************
// ADMIN -> USERS TAB
// ------------------------
function smd_bio_fields($evt, $stp, $mt, $data) {
	$out = $vals = array();

	$rstep = gps('step');
	if(smd_bio_table_exist()) {
		if ($rstep == 'author_edit' || $rstep == 'smd_um_edit') {
			extract(gpsa(array('user_id')));
			// Shame we have to double de-clutch here but we can't index on user_id unfortunately ('cos when
			// inserting new users, the bio functions run _BEFORE_ an auto_increment ID has been generated by TXP)
			$uname = safe_field('name','txp_users',"user_id = '".doSlash($user_id)."'");
			$vals = safe_row('*', SMD_BIO, "user_ref='".doSlash($uname)."'");
		}
		$widgets = safe_rows('*', SMD_BIO_META, '1=1 ORDER BY position');
		$tdac = ' class="noline"';
		$tdac_image = ' class="noline smd_bio_image_cell"';
		foreach ($widgets as $widget) {
			$val = ($vals && isset($vals[$widget['name']])) ? $vals[$widget['name']] : $widget['val'];
			$title = ($widget['title']) ? $widget['title'] : $widget['name'];
			$sizeopts = do_list($widget['size']);
			$size1 = ($sizeopts[0] > 0) ? $sizeopts[0] : '';
			$size2 = (isset($sizeopts[1]) && $sizeopts[1] > 0) ? $sizeopts[1] : '';
			$name = 'smd_bio_'.$widget['name'];
			switch($widget['type']) {
				case 'list':
					$selv = smd_bio_splitval($widget['val']);
					list($selv, $dflt) = smd_bio_get_default($selv, $val);
					$out[] = tr(fLabelCell($title).tda(selectInput($name, $selv, $dflt, false, '', $name), $tdac), ' class="smd_bio_select '.$name.'"');
					break;
				case 'multilist':
					$val = ($vals && isset($vals[$widget['name']])) ? $vals[$widget['name']] : '';
					$selv = smd_bio_splitval($widget['val']);
					list($selv, $dflt) = smd_bio_get_default($selv, $val);
					$use_val = $vals ? $val : $dflt; // Don't use defaults if this is a previously saved record
					$selectedVals = do_list($use_val);
					$items = array();
					$items[] = '<select name="'.$name.'" class="list multiple" multiple="multiple" onchange="smd_bio_multisel(\''.$name.'\');">';
					foreach ($selv as $idx => $lbl) {
						// Not using selectInput() because it doesn't support multiples
						$items[] = '<option value="ms_'.$idx.'" '.((in_array($idx, $selectedVals)) ? ' selected="selected"' : '') . '>' . $lbl . '</option>';
					}
					$items[] = '</select>';
					$out[] = tr(fLabelCell($title).tda(join(n,$items), $tdac), ' class="smd_bio_select '.$name.'"').fInput('hidden',$name,$use_val,'','','','','',$name);
					break;
				case 'radio':
					$selv = smd_bio_splitval($widget['val']);
					list($selv, $dflt) = smd_bio_get_default($selv, $val);
					$out[] = tr(fLabelCell($title).tda(radioSet($selv, $name, $dflt), $tdac), ' class="smd_bio_radio '.$name.'"');
					break;
				case 'yesnoradio':
					$out[] = tr(fLabelCell($title).tda(yesnoRadio($name, $val), $tdac), ' class="smd_bio_radio '.$name.'"');
					break;
				case 'checkbox':
					$val = ($vals && isset($vals[$widget['name']])) ? $vals[$widget['name']] : '';
					$selv = smd_bio_splitval($widget['val']);
					list($selv, $dflt) = smd_bio_get_default($selv, $val);
					$use_val = $vals ? $val : $dflt; // Don't use defaults if this is a previously saved record
					$checkedVals = do_list($use_val);
					$items = array();
					foreach ($selv as $idx => $lbl) {
						// Not using checkbox() because it doesn't support onclick
						$items[] = '<input type="checkbox" name="cb_'.$name.'" value="'.$idx.'"'.((in_array($idx, $checkedVals)) ? ' checked="checked"' : '') . ' class="checkbox" onclick="smd_bio_checkbox(\''.$name.'\');" />'.$lbl;
					}
					$out[] = tr(fLabelCell($title).tda(join('', $items), $tdac), ' class="smd_bio_checkbox '.$name.'"').fInput('hidden',$name,$use_val,'','','','','',$name);
					break;
				case 'textarea':
					// Not using text_area() because it forces inline styled width/height which should be in CSS
					$size1 = ($size1 == '' || $size1 == 0) ? 40 : $size1;
					$size2 = ($size2 == '' || $size2 == 0) ? 5 : $size2;
					$out[] = tr(fLabelCell($title).tda('<textarea id="'.$name.'" name="'.$name.'" class="smd_bio_textarea" cols="'.$size1.'" rows="'.$size2.'">'.htmlspecialchars($val).'</textarea>', $tdac), ' class="smd_bio_textarea '.$name.'"');
					break;
				case 'image':
					$parent = $widget['val'];
					$val = ($vals && isset($vals[$widget['name']])) ? $vals[$widget['name']] : '';
					$where = ($parent) ? "category='".doSlash($parent)."'" : '1=1';
					$tree = safe_rows('*', 'txp_image', $where);
					$selv = array();
					foreach ($tree as $row) {
						$selv[$row['id']] = $row['name'];
					}
					$out[] = tr(fLabelCell($title).tda('<input type="text" value="'.htmlspecialchars($val).'" name="'.$name.'" size="4" class="smd_bio_image_id" />'.selectInput($name.'_list', $selv, $val, true, '').'<div class="smd_bio_image"></div><span class="smd_bio_image_data" title="'.(($size1) ? $size1 : '').','.(($size2) ? $size2 : $size1).'"></span>', $tdac_image. ' id="'.$name.'"'), ' class="smd_bio_image_row '.$name.'"');
					break;
				case 'datetime':
				case 'text_input':
					// Not using fInput() because it has no MAXLENGTH property
					$size1 = ($size1 == '' || $size1 == 0) ? 25 : $size1;
					$size2 = ($size2 == '' || $size2 == 0) ? $size1 : $size2;
					$out[] = tr(fLabelCell($title).tda('<input type="text" value="'.htmlspecialchars($val).'" name="'.$name.'" id="'.$name.'" size="'.$size1.'" maxlength="'.$size2.'" class="smd_bio_text edit" />', $tdac), ' class="smd_bio_text_input '.$name.'"');
					break;
			}
		}
	}
	return join('', $out);
}

// ------------------------
// Read a name/val array and remove any [*] marker which indicates a default item
function smd_bio_get_default($list, $curr) {
	$out = array();
	$dflt = '';
	$new_dflt = array();
	foreach ($list as $item => $value) {
		if (($pos = strpos($value, '[*]')) !== false) {
			$out[$item] = substr($value, 0, $pos);
			$new_dflt[] = $item;
		} else {
			$out[$item] = $value;
		}
		if ($item == $curr) {
			$dflt = $item;
		}
	}
	$dflt = ($dflt) ? $dflt : join(',', $new_dflt);
	return array($out, $dflt);
}

// ------------------------
// AJAX calls
function smd_bio_get_image() {
	global $img_dir;

	$id = gps('id');
	if ($id) {
		$rs = safe_row('*', 'txp_image', "id = '".doSlash($id)."'");
		extract($rs);
		$out = array();
		$out['thumb'] = ($thumbnail) ? hu.$img_dir.'/'.$id.'t'.$ext : '';
		$out['image'] = hu.$img_dir.'/'.$id.$ext;
		$out['w'] = $w;
		$out['h'] = $h;
		$out['thw'] = ($thumb_w) ? $thumb_w : '';
		$out['thh'] = ($thumb_h) ? $thumb_h : '';
		send_xml_response($out);
	} else {
		send_xml_response();
	}
}

// ------------------------
// IMPORTANT: constants NOT used for table names
function smd_bio_get_ebio() {
	include_once txpath.'/publish/taghandlers.php';

	$id = gps('id');
	$core = array('user_ref');
	$rs = safe_row('*', 'smd_bio', "user_ref = '".doSlash($id)."'");
	$meta = safe_rows('*', 'smd_bio_meta', "1=1");
//	$include = array_merge($core, array('mug', 'cell', 'department')); // TODO: get these from prefs/meta table
	$allowed_types = array('text_input', 'textarea', 'datetime');
	$out = array();
	foreach ($rs as $idx => $val) {
//		if (in_array($idx, $include)) {
			if (in_array($idx, $core)) {
				$out[$idx] = doSlash($val);
			} else {
				foreach($meta as $row) {
					if ($row['name'] == $idx) {
						if ($row['type'] == "image") {
							// Crude str_replace() to remove javascript-breaking single quotes
							$out[$idx] = 'smd_image::'.str_replace("'", '', thumbnail(array('id'=> $val)));
						} else if (in_array($row['type'], $allowed_types)) {
							$out[$idx] = $row['title'].'::'.htmlspecialchars(strip_tags($val), ENT_QUOTES);
						}
						break;
					}
				}
			}
//		}
	}
	send_xml_response($out);
}

// Inject admin-side javascript
// ------------------------
function smd_bio_admin_js($evt, $stp) {
	global $event, $step, $smd_bio_styles;

	$runon = array(
		'admin' => array(
			'evt' => array('admin', 'smd_um'),
			'stp' => array('', 'smd_um', 'smd_um_edit', 'smd_um_edit', 'smd_um_save', 'smd_um_save_new', 'author_edit', 'author_save', 'author_save_new'),
		),
		'bio' => array(
			'evt' => array('smd_bio'),
		),
	);

	// ********
	// js+css for Admin->Users tab
	// ********
	if (in_array($event, $runon['admin']['evt']) !== false && in_array($step, $runon['admin']['stp']) !== false) {
		$css_custom = safe_field('css', 'txp_css', "name='smd_bio'");
		$css = '<style type="text/css">' . $css_custom .n. $smd_bio_styles['tooltip'] . '</style>';

	echo <<<EOJS
<script type="text/javascript">
//<![CDATA[

// Concatenate checkbox options for storage
function smd_bio_checkbox(dest) {
	var out = [];
	jQuery("#user_edit :checkbox").each(function() {
		var item = jQuery(this);
		if (item.attr('name').replace('cb_','') == dest) {
			if (item.prop('checked') == true) {
				out.push(item.val());
			}
		}
	});
	jQuery('#'+dest).val(out.join(','));
}
// Concatenate multi select list options for storage
function smd_bio_multisel(dest) {
	var out = [];
	jQuery("#user_edit select.multiple").each(function() {
		var item = jQuery(this);
		if (item.attr('name') == dest) {
			// You're the one that I want, ooh ooh oooohhh
			jQuery(item).children(":selected").each(function() {
				out.push(jQuery(this).val().replace('ms_',''));
			});
		}
	});
	jQuery('#'+dest).val(out.join(','));
}
jQuery(function() {
	// Grab images from the server when the select/textbox change
	jQuery(".smd_bio_image_id").blur(function() {
		id = jQuery(this).parent().attr('id');
		val = jQuery(this).val();
		smd_bio_get_image(id, val);
	}).blur();
	jQuery(".smd_bio_image_cell .list").change(function() {
		id = jQuery(this).parent().attr('id');
		val = jQuery(this).val();
		smd_bio_get_image(id, val);
	});
	function smd_bio_get_image(id, val) {
		jQuery("#" + id + " select option[value='"+val+"']").prop("selected", true);
		jQuery("#" + id + " input").val(val);
		var dims = jQuery("#" + id + " span.smd_bio_image_data").attr('title');
		var size = new Array();
		if (dims) {
			size = dims.split(",");
		}
		sendAsyncEvent({
				event: textpattern.event,
				smd_bio_step: 'smd_bio_get_image',
				id: val
			}, function(data) {
				data = jQuery(data);
				if (data) {
					var full = 0;
					var imgLink = data.find('thumb').attr('value');
					if (imgLink == '') {
						full = 1;
						var imgLink = data.find('image').attr('value');
					}
					if (size[0] == '') {
						if (full == 1) {
							size[0] = data.find('w').attr('value');
						} else {
							size[0] = data.find('thw').attr('value');
						}
					}
					if (size[1] == '') {
						if (full == 1) {
							size[1] = data.find('h').attr('value');
						} else {
							size[1] = data.find('thh').attr('value');
						}
					}
					jQuery("#" + id + " .smd_bio_image").fadeIn().html('<img src="'+imgLink+'" width="'+size[0]+'" height="'+size[1]+'" />');
				} else {
					jQuery("#" + id + " .smd_bio_image").fadeOut().empty();
				}
			}
		);
	}

	// Grab the extended info when hovering an author in the list
	jQuery("#users_form tbody tr, #smd_um_form tbody tr").hover(function(e) {
		var tt = '';
		var row = jQuery(this);
		var hovItem = row.find(".actions");

		if (row.data('tooltip') == undefined) {
			var person = row.find("td:first").text();

			sendAsyncEvent({
					event: textpattern.event,
					smd_bio_step: 'smd_bio_get_ebio',
					id: person
				}, function(data) {
					data = jQuery(data);
						var entry = data.find('user_ref');
						out = '';
						entry.nextAll().each(function(item) {
							node = jQuery(this).context.nodeName;
							if (node != 'http-status') {
								vall = jQuery(this).attr('value');
								if (vall) {
									vsplit = vall.split('::');
									if (vsplit[0].indexOf('smd_image') < 0) {
										out += ((vsplit.length>1) ? vsplit[0] : node) + ': ';
									}
									vall = ((vsplit.length>1) ? vsplit[1] : vsplit[0]);
									out += vall + '<br/>';
								} else {
									out += node+': ';
								}
							}
						});
						row.data('tooltip', out);
//						hovItem.trigger('mouseover'); // Trigger the hover state when the data is loaded
					}
			);
		}

		xOffset = 30;
		yOffset = 25;
		hovItem.hover(function(e) {
			var tt = jQuery(this).parent().data('tooltip');
			if (tt != '') {
				jQuery("body").append("<p id='tooltip'>"+ tt +"</p>");
				jQuery("#tooltip")
					.css("top",(e.pageY - xOffset) + "px")
					.css("left",(e.pageX + yOffset) + "px")
					.fadeIn("fast");
			}
		},
		function() {
			jQuery("#tooltip").remove();
	    });
		hovItem.mousemove(function(e) {
			jQuery("#tooltip")
				.css("top",(e.pageY - xOffset) + "px")
				.css("left",(e.pageX + yOffset) + "px");
		});
	});
});
//]]>
</script>
{$css}
EOJS;
	}

	// ********
	// js for Extensions->Bio config tab
	// ********
	if (in_array($event, $runon['bio']['evt'])) {
		global $smd_bio_types, $smd_bio_unused;

		$css = '<style type="text/css">' . $smd_bio_styles['meta'] . '</style>';
		$js_unused = join(',', doArray($smd_bio_unused['size'], 'doQuote'));

		foreach ($smd_bio_types as $type => $data) {
			$type_json[] = 'smd_bio_types["'.$type.'"] = { "dflt_type": "'.$data['coltype'].'", "dflt_size": "'.$data['colsize'].'", "fixed": "'.$data['fixed'].'" };';
		}
		$type_json = join(n, $type_json);

		echo <<<EOJS
<script type="text/javascript">
//<![CDATA[
var smd_bio_unused = [{$js_unused}];
var smd_bio_types = [];
var destColtype = "#page-smd_bio select[name='coltype']";
var destColsize = "#page-smd_bio input[name='colsize']";
{$type_json}

jQuery(function() {
	// Perform actions when the Type is changed
	// Action #1: size box. Auto-update this when Edit clicked as well as when select list is altered
	jQuery("#page-smd_bio .list[name='type']").change(function() {
		var theType = jQuery("#page-smd_bio .list[name='type'] option:selected").val();
		var destSize = "#page-smd_bio input[name='size']";

		// Grey out the Size box for those items that don't use it
		if (jQuery.inArray(theType, smd_bio_unused) > -1) {
			jQuery(destSize).prop("disabled", true);
			jQuery(destSize).parent().prev().css("color", '#999');
		} else {
			jQuery(destSize).prop("disabled", false);
			jQuery(destSize).parent().prev().css("color", '');
		}
	}).change();

	// Action #2: coltype/colsize. Can't amalgamate these with the 'size' onchange because
	// this only changes when select list changed (i.e. not when Edit first clicked)
	jQuery("#page-smd_bio .list[name='type']").change(function() {
		var theType = jQuery("#page-smd_bio .list[name='type'] option:selected").val();

		// Preselect the coltype + colsize based on the defaults
		jQuery(destColtype + " option[value='"+smd_bio_types[theType].dflt_type+"']").prop('selected', true);
		jQuery(destColsize).val(smd_bio_types[theType].dflt_size);

		if (smd_bio_types[theType].fixed == '') {
			jQuery(destColtype).prop("disabled", false);
			jQuery(destColsize).prop("disabled", false);
			jQuery(destColtype).parent().prev().css("color", '');
			jQuery(destColsize).parent().prev().css("color", '');
		} else {
			jQuery(destColtype).prop("disabled", true);
			jQuery(destColsize).prop("disabled", true);
			jQuery(destColtype).parent().prev().css("color", '#999');
			jQuery(destColsize).parent().prev().css("color", '#999');
		}
	});

	// Force the auto-change if the type is of a fixed variety
	theType = jQuery("#page-smd_bio .list[name='type'] option:selected").val();
	if (smd_bio_types[theType].fixed != '') {
		jQuery("#page-smd_bio .list[name='type']").change();
	}

	// When clicking Save, enable the coltype/colsize boxes so the values are transmitted in $_POST
	jQuery("#page-smd_bio input[name='save']").click(function() {
		jQuery(destColtype).prop("disabled", false);
		jQuery(destColsize).prop("disabled", false);
	});

	// Pop up the help tooltips based on the current Type
	jQuery(".pophelp.smd_bio_size").hover(
		function(e) {
			var theType = jQuery("#page-smd_bio .list[name='type'] option:selected").val();
			spanid = 'span#smd_bio_size_help_'+theType;
			this.title = jQuery(spanid).attr("title");
		}, function(e) {
			this.title = '';
		}
	);
	jQuery(".pophelp.smd_bio_val").hover(
		function(e) {
			var theType = jQuery("#page-smd_bio .list[name='type'] option:selected").val();
			spanid = 'span#smd_bio_val_help_'+theType;
			this.title = jQuery(spanid).attr("title");
		}, function(e) {
			this.title = '';
		}
	);

	// Handle opening/closing the coltype area
	jQuery('#smd_bio_coltype').click(function() {
		jQuery(this).toggleClass('expanded');
		jQuery('.smd_bio_coltype').toggle();

		sendAsyncEvent(
			{
				event: textpattern.event,
				step: 'smd_bio_save_pane_state',
				pane: 'coltype',
				visible: (jQuery(this).hasClass('expanded'))
			}
		);
	});
});
//]]>
</script>
{$css}
EOJS;
	}
}

// ------------------------
// Make the name/val pairs for selectInput / radio / checkbox sets
function smd_bio_splitval($val) {
	$selv = array();

	$wvals = explode(',', $val);
	foreach ($wvals as $wval) {
		$prts = explode('=>', $wval);
		if (count($prts) == 1) {
			$prts[1] = $prts[0];
			$prts[0] = smd_bio_sanitize($prts[0]);
		}
		$selv[trim($prts[0])] = trim($prts[1]);
	}
	return $selv;
}

// ------------------------
// Super-sanitize the passed value so we can make variable names from the returned string
function smd_bio_sanitize($val) {
	return strtolower(str_replace("-", "_", sanitizeForUrl($val)));
}

// ------------------------
function smd_bio_save($evt, $stp) {
	global $prefs;

	if (smd_bio_table_exist()) {
		$targetvars = array();
		extract(doSlash(psa(array('privs', 'name', 'email', 'RealName', 'user_id'))));
		if (get_pref('smd_bio_sanitize_name', 0) > 0) {
			// Sanitize and pass the new name forward to the actual txp_user save routine
			$name = strtolower(sanitizeForUrl($name));
			$_POST['name'] = $name;
		}
		$length = function_exists('mb_strlen') ? mb_strlen($name, '8bit') : strlen($name);

		if (($user_id || $name) and $length <= 64 and is_valid_email($email)) {
			foreach ($_POST as $idx => $item) {
				if (strpos($idx, 'smd_bio_') === 0) {
					$targetvars[] = $idx;
				}
			}

			// Double de-clutch again... dammit :-(
			$user_id = gps('user_id');
			if ($user_id) {
				$user_ref = safe_field('name','txp_users',"user_id = '$user_id'");
			} else {
				$user_ref = $name;
			}

			extract(gpsa($targetvars));
			$bcols = getThings('describe `'.PFX.SMD_BIO.'`');
			$sqlSet = array();
			foreach ($targetvars as $var) {
				$colname = str_replace('smd_bio_', '', $var);
				if (in_array($colname, $bcols)) {
					$sqlSet[] = "`$colname` = '".doSlash($$var)."'";
				}
			}
			if ($sqlSet) {
				$rs = safe_upsert(SMD_BIO, join(',', $sqlSet), "`user_ref` = '".doSlash($user_ref)."'");
			}
		}
	}
}

// ------------------------
function smd_bio_delete($evt, $stp) {
	global $txp_user;

	if (smd_bio_table_exist()) {
		// Since we are executing 'pre' delete we need to unfortunately duplicate some of the checks
		// from txp_admin.php so we minimise the opportunity to delete someone by mistake
		$selected = ps('selected');
		$method = ps('edit_method');
		if (!$selected or !is_array($selected)) {
			return;
		}
		if ($method != 'delete') {
			return;
		}

		$names = safe_column('name', 'txp_users', "name IN ('".join("','", doSlash($selected))."') AND name != '".doSlash($txp_user)."'");
		if (!$names) return;

		$assign_assets = ps('assign_assets');
		if ($assign_assets === '') {
			return;
		} elseif (in_array($assign_assets, $names)) {
			return;
		} else {
			// All the checks passed -- do it
			safe_delete(SMD_BIO, "user_ref IN ('".join("','", doSlash($names))."')");
		}
	}
}

// -------------------------------------------------------------
function smd_bio_save_pane_state() {
	global $event;
	$panes = array('coltype');
	$pane = gps('pane');
	if (in_array($pane, $panes)) {
		set_pref("pane_smd_bio_{$pane}_visible", (gps('visible') == 'true' ? '1' : '0'), $event, PREF_HIDDEN, 'yesnoradio', 0, PREF_PRIVATE);
		send_xml_response();
	} else {
		send_xml_response(array('http-status' => '400 Bad Request'));
	}
}

// ************************
// TABLE MANAGEMENT
// ------------------------
function smd_bio_table_exist() {
	if (gps('debug')) {
		echo "++ TABLE ".SMD_BIO_META." HAS ".count(@safe_show('columns', SMD_BIO_META))." COLUMNS;";
	}
	return(@safe_show('columns', SMD_BIO_META));
}

// ------------------------
function smd_bio_table_install($showpane=1) {
	global $smd_bio_types, $smd_bio_coltypes, $DB;

	$version = mysql_get_server_info();
	$GLOBALS['txp_err_count'] = 0;
	$msg = '';

	if ($version < "4.1.2") {
		$GLOBALS['txp_err_count']++;
		trigger_error("smd_bio requires MySQL v4.1.2 or greater.");
	} else {
		$ret = '';
		$sql = array();
		if (!smd_bio_table_exist()) {
			$sql[] = "CREATE TABLE IF NOT EXISTS `".PFX.SMD_BIO."` (
				`user_ref` varchar(64) NOT NULL default '',
				UNIQUE KEY `user_ref` (`user_ref`)
			) ENGINE=MyISAM PACK_KEYS=1 ";

			$sql[] = "CREATE TABLE IF NOT EXISTS `".PFX.SMD_BIO_META."` (
				`id` int(4) NOT NULL auto_increment,
				`title` varchar(64) NULL default '',
				`name` varchar(64) NOT NULL default '',
				`type` set(".doQuote(join("','", array_keys($smd_bio_types))).") NOT NULL default 'text_input',
				`size` varchar(10) NULL default 0,
				`coltype` set(".doQuote(join("','", array_keys($smd_bio_coltypes))).") NOT NULL default 'varchar',
				`colsize` smallint(4) NULL default 0,
				`val` text NULL default '',
				`position` varchar(16) NULL default '',
				PRIMARY KEY (`id`),
				UNIQUE KEY (`name`)
			) ENGINE=MyISAM AUTO_INCREMENT=1";
		}

		if(gps('debug')) {
			dmp($sql);
		}
		foreach ($sql as $qry) {
			$ret = safe_query($qry);
			if ($ret===false) {
				$GLOBALS['txp_err_count']++;
				echo "<b>".$GLOBALS['txp_err_count'].".</b> ".mysql_error()."<br />\n";
				echo "<!--\n $qry \n-->\n";
			}
		}

		// Handle upgrades from v0.3x to v0.40
		// Alter the position field from int to varchar so positioning can be non-numeric
		$ret = @safe_field("DATA_TYPE", "INFORMATION_SCHEMA.COLUMNS", "table_name = '".PFX.SMD_BIO_META."' AND table_schema = '" . $DB->db . "' AND column_name = 'position'");
		if ($ret != 'varchar') {
			safe_alter(SMD_BIO_META, "CHANGE `position` `position` VARCHAR( 16 ) NULL DEFAULT ''");
		}
		// Add the coltype and colsize columns
		$flds = getThings('SHOW COLUMNS FROM `'.PFX.SMD_BIO_META.'`');
		if (!in_array('coltype',$flds)) {
			safe_alter(SMD_BIO_META, "ADD `coltype` SET(".doQuote(join("','", array_keys($smd_bio_coltypes))).") NOT NULL default '' after `size`");
			safe_alter(SMD_BIO_META, "ADD `colsize` SMALLINT(4) NULL default 0 after `coltype`");
		}
		// Add multiple select list support to the 'type' set
		$fld = getRows("SHOW FULL COLUMNS FROM `".PFX.SMD_BIO_META."` LIKE 'type'");
		if (strpos($fld[0]['Type'], 'multilist') === false) {
			safe_alter(SMD_BIO_META, "CHANGE `type` `type` SET(".doQuote(join("','", array_keys($smd_bio_types))).")");
		}
	}

	if ($GLOBALS['txp_err_count'] == 0) {
		$msg = smd_bio_gTxt('tbl_installed');
	} else {
		$msg = smd_bio_gTxt('tbl_not_installed');
	}

	if ($showpane) {
		smd_bio_config($msg);
	}
}

// ------------------------
// Drop table if in database
function smd_bio_table_remove($showpane=1) {
	$ret = $msg = '';
	$sql = array();
	$GLOBALS['txp_err_count'] = 0;
	if (smd_bio_table_exist()) {
		$sql[] = "DROP TABLE IF EXISTS " .PFX.SMD_BIO. "; ";
		$sql[] = "DROP TABLE IF EXISTS " .PFX.SMD_BIO_META. "; ";
		if(gps('debug')) {
			dmp($sql);
		}
		foreach ($sql as $qry) {
			$ret = safe_query($qry);
			if ($ret===false) {
				$GLOBALS['txp_err_count']++;
				echo "<b>".$GLOBALS['txp_err_count'].".</b> ".mysql_error()."<br />\n";
				echo "<!--\n $qry \n-->\n";
			}
		}
	}
	if ($GLOBALS['txp_err_count'] == 0) {
		$msg = smd_bio_gTxt('tbl_removed');
	} else {
		$msg = smd_bio_gTxt('tbl_not_removed');
	}

	if ($showpane) {
		smd_bio_config($msg);
	}
}

// ************************
// PUBLIC-SIDE TAGS
// ------------------------
// Wrapper to permit bio info to be displayed for multiple authors
function smd_bio_author($atts, $thing=NULL) {
	global $smd_bio_author, $thisarticle;

	extract(lAtts(array(
		'author'     => '',
		'form'       => '',
		'wraptag'    => '',
		'break'      => '',
		'breakclass' => '',
		'class'      => '',
		'label'      => '',
		'labeltag'   => '',
	), $atts));

	$author = ($author) ? $author : (isset($thisarticle) ? $thisarticle['authorid'] : '');
	$author = do_list($author);
	$authors = array();
	$thing = (empty($form)) ? $thing : fetch_form($form);

	// Expand any priv levels
	foreach ($author as $user) {
		if (strpos(strtolower($user), "smd_privs") === 0) {
			$aprivs = explode(':', $user);
			array_shift($aprivs); // Remove smd_privs token from the array
			$authors = array_merge($authors, safe_column('name', 'txp_users', 'privs in (' . doQuote(join("','", $aprivs)) . ')'));
		} else {
			$authors[] = $user;
		}
	}

	// Parse content for each author
	foreach ($authors as $smd_bio_author) {
		$toParse = (empty($thing)) ? $smd_bio_author : $thing;
		$out[] = parse($toParse);
	}

	return doLabel($label, $labeltag).doWrap($out, $wraptag, $break, $class, $breakclass);
}

// Display biographical field data from a given user's profile
// TDOO: permit defaults to be displayed
function smd_bio_info($atts, $thing=NULL) {
	global $smd_bio_author, $thisarticle, $smd_bio_data, $smd_bio_item_data;

	// Data cache
	static $bio_info = array();
	static $meta = array();
	static $cmeta = array();
	static $metacols = array();

	extract(lAtts(array(
		'author'      => '', // Deprecated: use smd_bio_author tag as a wrapper instead
		'fields'      => 'SMD_ALL',
		'items'       => 'SMD_ALL', // Deprecated: use fields instead
		'exclude'     => '',
		'form'        => '',
		'wraptag'     => '',
		'break'       => '',
		'class'       => '',
		'label'       => '1',
		'labeltag'    => '',
		'labelclass'  => 'SMD_DFLT', // Deprecated
		'itemwraptag' => '', // Deprecated: use break
		'itemclass'   => 'SMD_DFLT', // Deprecated: use breakclass
		'breakclass'  => 'SMD_DFLT',
		'show_empty'  => 0,
		'var_prefix'  => 'smd_bio_',
		'debug'       => 0,
	), $atts));

	if (isset($atts['author'])) {
		trigger_error(gTxt('deprecated_attribute', array('{name}' => 'author')) . '. Use the smd_bio_author tag as a wrapper instead.', E_USER_NOTICE);
		unset($author);
	}
	if (isset($atts['items'])) {
		trigger_error(gTxt('deprecated_attribute', array('{name}' => 'items')) . '. Use fields instead.', E_USER_NOTICE);
		$fields = $items;
		unset($items);
	}
	if (isset($atts['itemwraptag'])) {
		trigger_error(gTxt('deprecated_attribute', array('{name}' => 'itemwraptag')) . '. Use break instead.', E_USER_NOTICE);
		$break = $itemwraptag;
		unset($itemwraptag);
	}
	if (isset($atts['itemclass'])) {
		trigger_error(gTxt('deprecated_attribute', array('{name}' => 'itemclass')) . '. Use breakclass instead.', E_USER_NOTICE);
		$breakclass = $itemclass;
		unset($itemclass);
	}
	if (isset($atts['labelclass'])) {
		trigger_error(gTxt('deprecated_attribute', array('{name}' => 'labelclass')), E_USER_NOTICE);
		unset($labelclass);
	}

	$author = ($smd_bio_author) ? $smd_bio_author : (isset($thisarticle) ? $thisarticle['authorid'] : '');
	$thing = (empty($form)) ? $thing : fetch_form($form);
	$smd_bio_item_data = array();

	$fields = do_list($fields);
	$exclude = do_list($exclude);
	$out = '';

	// The indices are the gTxt() names for the associated field
	$coreCols = array('id' => 'user_id', 'name' => 'name', 'real_name' => 'RealName', 'email' => 'email', 'privileges' => 'privs', 'date' => 'last_access');

	$list_types = array('checkbox', 'radio', 'list', 'multilist');

	if ($author) {
		$meta = (empty($meta)) ? safe_rows('*', SMD_BIO_META, '1=1') : $meta;
		$cmeta = (empty($cmeta)) ? safe_show('columns', 'txp_users') : $cmeta;
		$metacols = (empty($metacols)) ? safe_column('name', SMD_BIO_META, '1=1') : $metacols;
		$num = count($meta);

		foreach($cmeta as $info) {
			if (!in_array($info['Field'], $coreCols)) continue;
			$meta[$num]['name'] = $info['Field'];
			$tField = join('', array_keys($coreCols, $info['Field']));
			$meta[$num]['title'] = (gTxt($tField) == $tField) ? smd_bio_gTxt($tField) : gTxt($tField);
			$length = (($off = strpos($info['Type'], '(')) !== false) ? $off : strlen($info['Type']); // Find the first open bracket or end of string
			$meta[$num]['type'] = substr($info['Type'], 0, $length);
			$num++;
		}
		if ($debug > 1) {
			echo '++ META DATA ++';
			dmp($meta);
		}

		// Exclusions override given fields
		if ($exclude[0] != '' || in_array('SMD_ALL', $fields)) {
			$fields = $metacols;
			$fields = array_merge($fields, $coreCols);
		}

		if (isset($bio_info[$author])) {
			$cbio = $bio_info[$author]['cbio'];
			$ebio = $bio_info[$author]['ebio'];
		} else {
			$cbio = $bio_info[$author]['cbio'] = safe_row('*', 'txp_users', "name='".doSlash($author)."'");
			$ebio = $bio_info[$author]['ebio'] = safe_row('*', SMD_BIO, "user_ref='".doSlash($author)."'");
		}

		$replacements = $out = $toParse = array();
		$isSingle = (empty($thing)) ? true : false;
		$numFields = count($fields);

		foreach ($fields as $iref => $whatnot) {
			$idx = -1;
			if (in_array($whatnot, $exclude)) continue;

			// Find the meta row
			foreach ($meta as $num => $data) {
				if ($data['name'] == $whatnot) {
					$idx = $num;
					break;
				}
			}
			if ($idx > -1) {
				if (in_array($whatnot, $coreCols)) {
					$field = isset($cbio[$whatnot]) ? $cbio[$whatnot] : '';
				} else {
					$field = isset($ebio[$whatnot]) ? $ebio[$whatnot] : '';
				}

				$theName = $meta[$idx]['name'];
				$theTitle = $meta[$idx]['title'];
				$theClass = ($breakclass=='SMD_DFLT') ? $var_prefix.$theName : (($breakclass) ? $breakclass : '');
				$replacements['{'.$var_prefix.$theName.'_name}'] = $theName;
				$replacements['{'.$var_prefix.$theName.'_title}'] = $theTitle;
				$replacements['{'.$var_prefix.$theName.'_class}'] = $theClass;
				$smd_bio_data[$theName]['name'] = $theName;
				$smd_bio_data[$theName]['title'] = $theTitle;
				$smd_bio_data[$theName]['class'] = $theClass;

				if ($field || $show_empty) {
					if (in_array($meta[$idx]['type'], $list_types)) {
						$field = do_list($field);
						$field = join(', ',$field);
					}

					$replacements['{'.$var_prefix.$theName.'}'] = $field;
					$smd_bio_data[$theName]['value'] = $field;

					// For backwards compatibility(ish) with v0.3x
					if ($numFields == 1) {
						$replacements['{'.$var_prefix.'info_item}'] = $field; // Deprecated, use info_value instead
						$replacements['{'.$var_prefix.'info_value}'] = $field;
						$replacements['{'.$var_prefix.'info_name}'] = $theName;
						$replacements['{'.$var_prefix.'info_title}'] = $theTitle;
						$replacements['{'.$var_prefix.'info_itemclass}'] = $theClass; // Deprecated: use info_class instead
						$replacements['{'.$var_prefix.'info_class}'] = $theClass;
					}

					if (in_array($meta[$idx]['type'], $list_types)) {
						$chosens = do_list($field);
						$nv = smd_bio_splitval($meta[$idx]['val']);
						list($nv, $dflt) = smd_bio_get_default($nv, $field);
						$dflts = do_list($dflt);
						$listctr=1;
						$chosenctr=0;
						foreach($nv as $listitem => $listlabel) {
							$replacements['{'.$var_prefix.$theName.'_item_'.$listctr.'}'] = $listitem;
							$replacements['{'.$var_prefix.$theName.'_title_'.$listctr.'}'] = $listlabel;
							$smd_bio_data[$theName]['item_'.$listctr] = $listitem;
							$smd_bio_data[$theName]['title_'.$listctr] = $listlabel;
							if (in_array($listitem, $chosens)) {
								$chosenctr++;
								$replacements['{'.$var_prefix.$theName.'_chosen_item_'.$chosenctr.'}'] = $listitem;
								$replacements['{'.$var_prefix.$theName.'_chosen_title_'.$chosenctr.'}'] = $listlabel;
								$smd_bio_data[$theName]['chosen_item_'.$chosenctr] = $listitem;
								$smd_bio_data[$theName]['chosen_title_'.$chosenctr] = $listlabel;
							}
							$listctr++;
						}
						$dfltctr = 1;
						foreach($dflts as $dfltitem) {
							$replacements['{'.$var_prefix.$theName.'_default_'.$dfltctr.'}'] = $dfltitem;
							$smd_bio_data[$theName]['default_'.$dfltctr] = $dfltitem;
							$dfltctr++;
						}
						$replacements['{'.$var_prefix.$theName.'_item_count}'] = $listctr-1;
						$replacements['{'.$var_prefix.$theName.'_chosen_count}'] = $chosenctr;
						$replacements['{'.$var_prefix.$theName.'_default_count}'] = $dfltctr-1;
						$smd_bio_data[$theName]['item_count'] = $listctr-1;
						$smd_bio_data[$theName]['chosen_count'] = $chosenctr;
						$smd_bio_data[$theName]['default_count'] = $dfltctr-1;
					}
					// Without container/form, build up generic output
					if ($isSingle) {
						$taglab = (($label==1) ? $theTitle : (($label=='') ? '' : (($label) ? $label : $theName)));
						$toParse[] = doLabel($taglab, $labeltag) . (($break) ? doTag($field, $break, $theClass) : $field);
					}
				}
			}
		}

		if ($debug) {
			echo '++ REPLACEMENTS ++';
			dmp($replacements);
		}

		if (!$isSingle) {
			$toParse[] = doTag($thing, $wraptag, $class);
		}

		$out[] = parse(strtr(join(n, $toParse), $replacements));

		$final = ($wraptag) ? doWrap($out, $wraptag, '', $class) : join('', $out);
	}
	return $final;
}

// Convenience function for those that prefer a tag over {replacements}
// TODO: break/wraptag/class and allow comma-sep list of items?
function smd_bio_data($atts, $thing=NULL) {
	global $smd_bio_data, $smd_bio_item_data;

	extract(lAtts(array(
		'field' => '',
		'item'  => 'value',
		'debug' => 0,
	), $atts));

	$bdata = is_array($smd_bio_data) ? $smd_bio_data : array();
	$idata = is_array($smd_bio_item_data) ? $smd_bio_item_data : array();
	$datapool = array_merge($bdata, $idata);

	if ($debug) {
		echo '++ AVAILABLE INFO ++';
		dmp($datapool);
	}

	return (isset($datapool[$field][$item])) ? $datapool[$field][$item] : '';
}

// Convenience function to iterate over N multi-items
// TDOO: permit defaults to be displayed
function smd_bio_iterate($atts, $thing=NULL) {
	global $smd_bio_data, $smd_bio_item_data;

	extract(lAtts(array(
		'field'      => '',
		'using'      => 'chosen', // chosen, all
		'display'    => 'title', // item, title
		'var_prefix' => 'smd_bio_',
		'wraptag'    => '',
		'class'      => '',
		'break'      => '',
		'form'       => '',
		'limit'      => 0,
		'offset'     => 0,
		'debug'      => 0,
	), $atts));

	if ($debug > 1) {
		echo '++ AVAILABLE INFO ++';
		dmp($smd_bio_data);
	}

	// Validation 1
	$usingMap = array('all' => '', 'chosen' => 'chosen');
	$using = isset($usingMap[$using]) ? $using : 'chosen';

	// Validation 2
	$displayMap = array('item' => 'item', 'title' => 'title');
	$display = isset($displayMap[$display]) ? $display : 'title';

	$flavour = ($using == 'chosen') ? 1 : 0;
	$countType = $flavour ? 'chosen_count' : 'item_count';

	$out = $reps = array();

	// Can only iterate over items that have a count
	if (isset($smd_bio_data[$field][$countType])) {
		for ($idx = 1; $idx <= $smd_bio_data[$field][$countType]; $idx++) {
			if (( ($idx-1) >= $offset ) && ( $limit == 0 || (($idx-1) < $limit+$offset) )) { 
				$key = (($usingMap[$using]) ? $usingMap[$using]. '_' : '') . $displayMap[$display] . '_' . $idx;
				$uval = $usingMap[$using] ? $usingMap[$using].'_' : '';
				$itm = $smd_bio_data[$field][$uval . 'item_'.$idx];
				$ttl = $smd_bio_data[$field][$uval . 'title_'.$idx];
				$reps = array(
					'{'.$var_prefix.'this_item}' => $itm,
					'{'.$var_prefix.'this_title}' => $ttl,
					'{'.$var_prefix.'this_index}' => $idx,
				);
				$smd_bio_item_data[$field]['this_item'] = $itm;
				$smd_bio_item_data[$field]['this_title'] = $ttl;
				$smd_bio_item_data[$field]['this_index'] = $idx;
				if ($debug) {
					echo '++ ITERATOR REPLACEMENTS ++';
					dmp($reps);
				}
				$out[] = ($thing) ? parse(strtr($thing, $reps)) : ( ($form) ? parse_form(strtr($form, $reps)) : $smd_bio_data[$field][$key] );
			}
		}
	}

	return ($wraptag) ? doWrap($out, $wraptag, $break, $class) : join (n, $out);
}

// Convenience conditional to test a field/item. Use smd_if for more advanced conditional logic
function smd_if_bio($atts, $thing=NULL) {
	global $smd_bio_data, $smd_bio_item_data;

	extract(lAtts(array(
		'field' => '',
		'item'  => 'value',
		'value' => '',
		'debug' => 0,
	), $atts));

	$bdata = is_array($smd_bio_data) ? $smd_bio_data : array();
	$idata = is_array($smd_bio_item_data) ? $smd_bio_item_data : array();
	$datapool = array_merge($bdata, $idata);
	if ($debug) {
		echo '++ AVAILABLE INFO ++';
		dmp($datapool);
	}

	$result = false;

	if (isset($datapool[$field][$item])) {
		if ($value) {
			$result = ($datapool[$field][$item] == $value);
		} else {
			$result = ($datapool[$field][$item] != '');
		}
	}

	return parse(EvalElse($thing, $result));
}

// ------------------------
// A wrapper to article_custom that auto sets the user to the one specified
// or the current article's author.
// NOTE: lAtts() is NOT used because that limits the plugin attributes.
function smd_bio_articles($atts, $thing=NULL) {
	global $thisarticle;

	$author = (isset($atts['author'])) ? $atts['author'] : (isset($thisarticle) ? $thisarticle['authorid'] : '');
	$atts['author'] = $author;
	return parseArticles($atts, '1', $thing);
}

// ------------------------
// Plugin-specific replacement strings - localise as required
function smd_bio_gTxt($what, $atts = array()) {
	$lang = array(
		'en-gb' => array(
			'admin_tab' => 'Bio config',
			'colsize' => 'Column size',
			'coltype' => 'Column type',
			'help' => 'Tip',
			'help_unused' => 'Unused for this Type',
			'id' => 'ID',
			'more' => 'More',
			'name' => 'Name',
			'meta_add' => 'Add bio field',
			'meta_added' => 'Bio field added',
			'meta_not_added' => 'Problem adding bio field: check name is not already used',
			'meta_deleted' => 'Bio field and all its data deleted',
			'meta_not_deleted' => 'Problem deleting bio field: it may still exist',
			'meta_edit' => 'Edit bio field',
			'meta_update_failed' => 'Failed to save bio field "{name}"',
			'meta_update_partial' => 'Partially saved bio field "{name}"',
			'meta_updated' => 'Bio field "{name}" updated',
			'position' => 'Position',
			'privileges' => 'Privileges',
			'real_name' => 'Full name',
			'size' => 'Size',
			'sizehelp_text_input' => 'Up to two comma-separated values specifying the number of characters: 1) of the input box on the Admin->Users tab, 2) the user is allowed to enter',
			'sizehelp_textarea' => 'Up to two comma-separated values specifying the dimensions of the textarea in characters: 1) Width, 2) Height',
			'sizehelp_image' => 'The x,y dimensions of the image/thumbnail on the Admin->Users tab. If only one value is given, the image will be square. If either value is omitted, the dimensions stored in the database will be used',
			'valhelp_text_input' => 'The default value that will appear in the text box',
			'valhelp_lrc' => 'Comma- or newline-separated list of available options in the set. If you list only item labels, the names will be automatically generated (lower case, no spaces). You may specify your own names using: name1 => Label 1, name2 -> Label 2, ...',
			'valhelp_ynr' => 'Default value of the Yes/No checkbox. 0 (or omitted) = No; 1 = Yes',
			'valhelp_image' => 'Limit the images in the dropdown to the ones in this given parent image category. If omitted, all images are available',
			'tbl_installed' => 'Tables installed.',
			'tbl_not_installed' => 'Tables NOT installed.',
			'tbl_removed' => 'Tables removed.',
			'tbl_not_removed' => 'Tables NOT removed.',
			'title' => 'Title',
			'type' => 'Type',
			'value' => 'Value',
		),
	);

	$thislang = get_pref('language', 'en-gb');
	$thislang = (isset($lang[$thislang][$what])) ? $thislang : 'en-gb';
	return strtr($lang[$thislang][$what], $atts);
}";s:4:"type";s:1:"1";s:5:"order";s:1:"5";s:5:"flags";s:1:"2";s:3:"md5";s:32:"9223df71c2d4feb5fd9bd4ccc2564ffe";}